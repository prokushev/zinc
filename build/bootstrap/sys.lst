ZMAC Relocating Macro Assembler v 1.7,                       page    1
                                                            SYS     .Z80
                                                            3A/17/1F 27:00

     1                     ;
     2                     ; Simple example program to write a boot sector to the disk in drive A:.
     3                     ;
     4                     ; based on example program from zx spectrum +3 manual
     5                     ; by Cliff Lawson
     6                     ; copyright (c) AMSTRAD plc. 1987
     7                     ;
     8                     ;       org     07000h

    10                                     .Z80
    11                                     CSEG

    13                     ; I/O ports
    14         = 7FFD      bank1           equ     07FFDh          ;"horizontal" and RAM switch port
    15         = 1FFD      bank2           equ     01FFDh          ;"vertical" switch port
    16                     ; Sysvars
    17         = 5B5C      bankm           equ     05B5Ch          ;
    18         = 5B67      bank678         equ     05B67h          ;
    19                     ; API
    20         = 0151      dos_ref_xdpb    equ     0151h           ;
    21         = 0166      dd_write_sector equ     0166h           ;
    22         = 0175      dd_login        equ     0175h           ;

    24         = 7500      bootsector      EQU     7500H           ; Boot sector image in memory

    26   0000'             start:
    27   0000' ED73 0083'          ld      (olstak), sp            ; save BASIC's stack pointer
    28   0004' 31 00E9'            ld      sp, mystak              ; put stack below switched RAM pages
    29   0007' FDE5                push    iy                      ; save IY on stack for the moment

    31                     ;
    32                     ;DOS REF XDPB
    33                     ;0151h (337)
    34                     ;
    35                     ;Point at the XDPB for this drive. (The XDPB is required by the floppy
    36                     ;disk driver routines.)
    37                     ;
    38                     ;ENTRY CONDITIONS
    39                     ;       A = Drive, ASCII 'A'...'P'
    40                     ;
    41                     ;EXIT CONDITIONS
    42                     ;       If OK:
    43                     ;               Carry true
    44                     ;               A corrupt
    45                     ;               IX = Address of XDPB
    46                     ;       Otherwise:
    47                     ;               Carry false
    48                     ;               A = Error code
    49                     ;               IX corrupt
    50                     ;       Always:
    51                     ;               BC DE HL corrupt
    52                     ;               All other registers preserved
    53                     ;

    55   0009' 3E 41               ld      a, "A"                  ; drive A:
    56   000B' FD21 0151           ld      iy, dos_ref_xdpb        ; make IX point to XDPB A: (necessary for
ZMAC Relocating Macro Assembler v 1.7,                       page    2
                                                            SYS     .Z80
                                                            3A/17/1F 27:00

    57   000F' CD 0053'            call    dodos                   ; calling DD routines)

    59                     ;
    60                     ;DD LOGIN
    61                     ;0175h (373)
    62                     ;
    63                     ;Log in a new disk.
    64                     ;
    65                     ;Initialise the XDPB.
    66                     ;
    67                     ;This routine does not affect or consider the freeze flag.
    68                     ;
    69                     ;ENTRY CONDITIONS
    70                     ;       C = Unit (0/1)
    71                     ;       IX = Address of destination XDPB
    72                     ;
    73                     ;EXIT CONDITIONS
    74                     ;       If OK:
    75                     ;               Carry true
    76                     ;               A = Disk type
    77                     ;               DE = Size of allocation vector
    78                     ;               HL = Size of hash table
    79                     ;       Otherwise:
    80                     ;               Carry false
    81                     ;               A = Error code
    82                     ;               DE HL corrupt
    83                     ;       Always:
    84                     ;               BC IX corrupt
    85                     ;               All other registers preserved
    86                     ;
    87                     ;
    88   0012' 0E 00               ld      c, 0                    ; log in disk in unit 0 so that writing sectors
    89   0014' DDE5                push    ix                      ; wont say "disk has been changed"
    90   0016' FD21 0175           ld      iy, dd_login            ; 
    91   001A' CD 0053'            call    dodos
    92   001D' DDE1                pop     ix

    94   001F' 21 7500             ld      hl, bootsector
    95   0022' 01 0200             ld      bc, 512                 ; going to checksum 512 bytes of sector
    96   0025' AF                  xor     a
    97   0026' 32 750F             ld      (bootsector + 15), a    ; reset checksum for starters
    98   0029' 5F                  ld      e, a                    ; E will hold 8 bit sum

   100   002A'             ckloop:

   102   002A' 7B                  ld      a, e
   103   002B' 86                  add     a, (hl)                 ;this loop makes 8 bit checksum of 512 bytes
   104   002C' 5F                  ld      e, a                    ;sector in E
   105   002D' 23                  inc     hl
   106   002E' 0B                  dec     bc
   107   002F' 78                  ld      a, b
   108   0030' B1                  or      c
   109   0031' 20 F7'              jr      nz, ckloop
   110   0033' 7B                  ld      a, e                    ; A now has 8 bit checksum of the sector
   111   0034' 2F                  cpl                             ; ones complement (+1 here would give negative value)
   112   0035' C6 04               add     a, 4                    ; add 3 to make sum = 3 + 1 to make twos complement
ZMAC Relocating Macro Assembler v 1.7,                       page    3
                                                            SYS     .Z80
                                                            3A/17/1F 27:00

   113   0037' 32 750F             ld      (bootsector + 15), a    ; will make bytes checksum to 3 mod 256

   115   003A' 06 00               ld      b, 0                    ; page 0 at C000h
   116   003C' 0E 00               ld      c, 0                    ; unit 0
   117   003E' 16 00               ld      d, 0                    ; track 0
   118   0040' 1E 00               ld      e, 0                    ; sector 1 (0 because of logical/physical trans.)
   119   0042' 21 7500             ld      hl, bootsector          ; address of info. to write as boot sector
   120   0045' FD21 0166           ld      iy, dd_write_sector
   121   0049' CD 0053'            call    dodos                   ; actually write sector to disk

   123   004C' FDE1                pop     iy                      ; put IY back so BASIC can reference its system
   124                                                             ; variables
   125   004E' ED7B 0083'          ld      sp, (olstak)            ; put original stack back

   127                     ;
   128                     ;DD WRITE SECTOR
   129                     ;0166h (358)
   130                     ;
   131                     ;Write a sector.
   132                     ;
   133                     ;ENTRY CONDITIONS
   134                     ;       B = Page for C000h (49152)...FFFFh (65535)
   135                     ;       C = Unit (0/1)
   136                     ;       D = Logical track, 0 base
   137                     ;       E = Logical sector, 0 base
   138                     ;       HL = Address of buffer
   139                     ;       IX = Address of XDPB
   140                     ;
   141                     ;EXIT CONDITIONS
   142                     ;       If OK:
   143                     ;               Carry true
   144                     ;               A corrupt
   145                     ;       Otherwise:
   146                     ;               Carry false
   147                     ;               A = Error code
   148                     ;       Always:
   149                     ;               BC DE HL IX corrupt
   150                     ;               All other registers preserved
   151                     ;
   152                     ; Undoc? seems BC will contain size of of bytes in sector

   154                     ;       ld      c, a                    ; error number from dd_write_sector
   155                     ;       ld      b, 0

   157   0052' C9                  ret                             ; return to USR call in BASIC


   160   0053'             dodos:
   161                     ;
   162                     ; IY holds the address of the DOS routine to be run. All other registers are
   163                     ; passed intact to the DOS routine and are returned from it.
   164                     ;
   165                     ; Stack is somewhere in central 32K (conforming to DOS requirements), so saved
   166                     ; AF and BC will not be switched out.
   167                     ;
   168   0053' F5                  push    af
ZMAC Relocating Macro Assembler v 1.7,                       page    4
                                                            SYS     .Z80
                                                            3A/17/1F 27:00

   169   0054' C5                  push    bc                      ; temp save registers while switching
   170   0055' 3A 5B5C             ld      a, (bankm)              ; RAM/ROM switching system variable
   171   0058' F6 07               or      7                       ; want RAM page 7
   172   005A' CBA7                res     4, a                    ; and DOS ROM
   173   005C' 01 7FFD             ld      bc, bank1               ; port for horiz ROM and RAM paging
   174   005F' F3                  di
   175   0060' 32 5B5C             ld      (bankm), a              ; keep system variables up to date
   176   0063' ED79                out     (c), a                  ; RAM page 7 to top and DOS ROM
   177   0065' FB                  ei
   178   0066' C1                  pop     bc
   179   0067' F1                  pop     af

   181   0068' CD 0081'            call    jumptoit                ; go sub routine address in IY

   183   006B' F5                  push    af                      ; return from JP (IY) will be to here
   184   006C' C5                  push    bc
   185   006D' 3A 5B5C             ld      a, (bankm)
   186   0070' E6 F8               and     0F8h                    ; reset bits for page 0
   187   0072' CBE7                set     4, a                    ; switch to ROM 3 (48 BASIC)
   188   0074' 01 7FFD             ld      bc, bank1
   189   0077' F3                  di
   190   0078' 32 5B5C             ld      (bankm), a
   191   007B' ED79                out     (c), a                  ; switch back to RAM page 0 and 48 BASIC
   192   007D' FB                  ei
   193   007E' C1                  pop     bc
   194   007F' F1                  pop     af
   195   0080' C9                  ret

   197   0081'             jumptoit:
   198   0081' FDE9                jp      (iy)                    ; standard way to CALL (IY)


   201   0083'             olstak:
   202   0083' 0000                dw      0                       ; somewhere to put BASIC's stack pointer 
   203   0085' 00 00 00 00         ds      100                     ; enough stack to meet +3DOS requirements
   204   00E9'             mystak:


   207                     end
                                                                               