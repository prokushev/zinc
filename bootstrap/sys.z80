;
; sys.bin tool for ZINC installer to produce bootable
; disk.
;
;    Spectrum +2A/+3 XBIOS: Spectrum +2A/+3 XBIOS implementation for ZINC
;    Copyright (C) 2018  Yuri Prokushev <yuri.prokushev@gmail.com>
;
;    This program is free software; you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation; either version 2 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with this program; if not, write to the Free Software
;    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; based on example program from zx spectrum +3 manual
; by Cliff Lawson
; copyright (c) AMSTRAD plc. 1987
;
;	org	07000h

		.Z80
		CSEG

; I/O ports
bank1		equ	07FFDh		;"horizontal" and RAM switch port
; Sysvars
bankm		equ	05B5Ch		;
; +3DOS API
dos_ref_xdpb	equ	0151h     	;
dd_write_sector	equ	0166h     	;
dd_login	equ	0175h     	;

bootsector	EQU	7500H		; Boot sector image in memory

start:
	ld	(olstak), sp		; save BASIC's stack pointer
	ld	sp, mystak		; put stack below switched RAM pages
	push	iy			; save IY on stack for the moment

;
;DOS REF XDPB
;0151h (337)
;
;Point at the XDPB for this drive. (The XDPB is required by the floppy
;disk driver routines.)
;
;ENTRY CONDITIONS
;	A = Drive, ASCII 'A'...'P'
;
;EXIT CONDITIONS
;	If OK:
;		Carry true
;		A corrupt
;		IX = Address of XDPB
;	Otherwise:
;		Carry false
;		A = Error code
;		IX corrupt
;	Always:
;		BC DE HL corrupt
;		All other registers preserved
;

	ld	a, "A"			; drive A:
	ld	iy, dos_ref_xdpb	; make IX point to XDPB A: (necessary for
	call	dodos			; calling DD routines)

;
;DD LOGIN
;0175h (373)
;
;Log in a new disk.
;
;Initialise the XDPB.
;
;This routine does not affect or consider the freeze flag.
;
;ENTRY CONDITIONS
;	C = Unit (0/1)
;	IX = Address of destination XDPB
;
;EXIT CONDITIONS
;	If OK:
;		Carry true
;		A = Disk type
;		DE = Size of allocation vector
;		HL = Size of hash table
;	Otherwise:
;		Carry false
;		A = Error code
;		DE HL corrupt
;	Always:
;		BC IX corrupt
;		All other registers preserved
;
;
	ld	c, 0			; log in disk in unit 0 so that writing sectors
	push	ix			; wont say "disk has been changed"
	ld	iy, dd_login		; 
	call	dodos
	pop	ix

	ld	hl, bootsector
	ld	bc, 512			; going to checksum 512 bytes of sector
	xor	a
	ld	(bootsector + 15), a	; reset checksum for starters
	ld	e, a			; E will hold 8 bit sum

ckloop:

	ld	a, e
	add	a, (hl)			;this loop makes 8 bit checksum of 512 bytes
	ld	e, a			;sector in E
	inc	hl
	dec	bc
	ld	a, b
	or	c
	jr	nz, ckloop
	ld	a, e			; A now has 8 bit checksum of the sector
	cpl				; ones complement (+1 here would give negative value)
	add	a, 4			; add 3 to make sum = 3 + 1 to make twos complement
	ld	(bootsector + 15), a	; will make bytes checksum to 3 mod 256

;
;DD WRITE SECTOR
;0166h (358)
;
;Write a sector.
;
;ENTRY CONDITIONS
;	B = Page for C000h (49152)...FFFFh (65535)
;	C = Unit (0/1)
;	D = Logical track, 0 base
;	E = Logical sector, 0 base
;	HL = Address of buffer
;	IX = Address of XDPB
;
;EXIT CONDITIONS
;	If OK:
;		Carry true
;		A corrupt
;	Otherwise:
;		Carry false
;		A = Error code
;	Always:
;		BC DE HL IX corrupt
;		All other registers preserved
;
; Undoc? seems BC will contain size of of bytes in sector

	ld	b, 0			; page 0 at C000h
	ld	c, 0			; unit 0
	ld	d, 0			; track 0
	ld	e, 0			; sector 1 (0 because of logical/physical trans.)
	ld	hl, bootsector		; address of info. to write as boot sector
	ld	iy, dd_write_sector
	call	dodos			; actually write sector to disk

	pop	iy			; put IY back so BASIC can reference its system
					; variables
	ld	sp, (olstak)		; put original stack back

;	ld	c, a			; error number from dd_write_sector
;	ld	b, 0

	ret				; return to USR call in BASIC


dodos:
;
; IY holds the address of the DOS routine to be run. All other registers are
; passed intact to the DOS routine and are returned from it.
;
; Stack is somewhere in central 32K (conforming to DOS requirements), so saved
; AF and BC will not be switched out.
;
	push	af
	push	bc			; temp save registers while switching
	ld	a, (bankm)		; RAM/ROM switching system variable
	or	7			; want RAM page 7
	res	4, a			; and DOS ROM
	ld	bc, bank1		; port for horiz ROM and RAM paging
	di
	ld	(bankm), a		; keep system variables up to date
	out	(c), a			; RAM page 7 to top and DOS ROM
	ei
	pop	bc
	pop	af

	call	jumptoit		; go sub routine address in IY

	push	af			; return from JP (IY) will be to here
	push	bc
	ld	a, (bankm)
	and	0F8h			; reset bits for page 0
	set	4, a			; switch to ROM 3 (48 BASIC)
	ld	bc, bank1
	di
	ld	(bankm), a
	out	(c), a			; switch back to RAM page 0 and 48 BASIC
	ei
	pop	bc
	pop	af
	ret

jumptoit:
	jp	(iy)			; standard way to CALL (IY)


olstak:
	dw	0			; somewhere to put BASIC's stack pointer 
	ds	100			; enough stack to meet +3DOS requirements
mystak:


end