;***************************************************************************
; Hard disk routines for SB-180 via the Micromint NCR 5380 SCSI addon, or
; the 53C80 controller on the ETS180IO+ expansion board. These routines use
; polled operation of the internal SCSI Controller registers to perform IO.
; Direct driver IO routines to Select (SELHD), Read (HDREAD), Write (HDWRIT),
; and directly access the Low-Level SCSI driver (SCSI) are all included here.
;--------------------------------------------------------------------------
; 1.2 -  5 Jun 04 - Cleaned up for GPL Release.				HFB
; 1.1 - 28 May 93 - Fixed Access to fast drives.			JTH
;		 Corrected Multiple Hard Drive Rd/Wr code.		HFB
; 1.0 - 31 Aug 92 - First General Release.				HFB
; 0.0 - 10 Jul 91 - Initial Test Release				HFB
;***************************************************************************

	  IF  BANKED
	COMMON	/BANK2/
	  ELSE
	CSEG
	  ENDIF

;=====================================================================
; Function 0 - Set User Data Area Address for Direct SCSI IO, Return
;		number of bytes in the SCSI driver Command Block.
; Enter: DE = Address of User Data Area
; Exit :  A = Number of bytes available in the SCSI Command Block
; Uses : A,HL
;=====================================================================

HDVALS:	LD	(DATADR),DE	; Save the Users Data Area
	LD	A,CMDSIZ	; Get Command Block Size
	RET

;=====================================================================
; Function 1 - Set Physical Device bit and Logical Unit Number in SCSI
;	Command Block (Byte 1, bits 7-5) from byte in A.
; Enter:  A = Device Byte (See ICFG-xx.Z80)
; Exit :  A = Physical Device Bit of selected drive
; Uses : AF
;=====================================================================

HDSLCT:	PUSH	BC		; Save regs
	LD	C,A		;   and entry byte
	AND	0E0H		; Mask off all but Logical Unit Number
	LD	(LUNSAV),A	;   and save for execution
	LD	A,C		; Get byte back
	AND	07H		;   keeping only Physical Device bits
	LD	B,A		; Prepare for bit rotation
	INC	B		;   by bumping count for initial value
	XOR	A		; Start with 0 byte
	SCF			;  and 1 bit in Carry
HDSLCZ:	RLA			; Rotate bit around thru Carry
	DJNZ	HDSLCZ		; ..until properly positioned
	LD	(HDEVIC),A	; Save for future operations
	POP	BC		; Restore regs
	RET

;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
; Select hard disk (SCSI Device and Unit)	< Internal BIOS Routine >

SELHD:	LD	A,(SEKPDN)	; Load Device and Unit # to select

SELHDA:	LD	C,A		; Position for calculations
	LD	B,HDRV1-HDRV0	;   with size
	MLT	BC		; Calculate offset into table
	LD	HL,HDRV0	;  from first Physical drive
	ADD	HL,BC
	LD	A,(HL)		; Fetch Device/LUN byte
	CALL	HDSLCT		;   setting variables for Device and LUN
	CALL	HDINIT		; Do the actual initialization
	JP	NZ,SELERR	; ..return Null DPH ptr if Errors, Else..
	JP	SETPARMS	; Set parameters and return

;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
; Initialize Xebec 1410/Shugart 1610-3 Controller for
;  appropriate Drive Specs.  Does Nothing if Owl, Adaptec or SCSI.
; Enter: HL -> Configuration block for desired drive (see ICFG-xx)
; Exit :  A = 0, Zero Set (Z) if Ok, A <> 0, Zero Clear (NZ) if Error
; Uses : AF,BC,DE,HL
; NOTE : This routine uses the Physical drive parameters contained
;	 in ICFG-xx to determine some of the parameters.
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

HDINIT:	LD	A,(CNTRLR)	; Get Controller type
	CP	2		; Is it Xebec 1410/Shugart 1610-3?
	JR	Z,HDINIS	; ..jump if So to Initialize Controller
	XOR	A		; Else signify this was done Ok
	RET			; ..and quit

; Build the Xebec 1410A/Shugart 1610-3 Initialization Block

HDINIS:	LD	DE,INIBUF	; Build the Init Block Here
	INC	HL		;  step past Drive #
	LD	A,(HL)		; Get Lo.Cyl #
	INC	HL
	LDI			; Move Hi.Cyl #
	LD	(DE),A		;   and save Lo.Cyl #
	INC	DE
	LDI			; Move # of Heads
	LD	A,(HL)		; Get Lo.Reduced Write Cyl #
	INC	HL
	LDI			; Move Hi.Reduced Write Cyl #
	LD	(DE),A		; ..and save Lo.Red Wr Cyl #
	INC	DE
	LD	A,(HL)		; Get Lo.Precomp Cyl #
	INC	HL
	LDI			; Move Hi.Precomp Cyl #
	LD	(DE),A		;   and save Lo.Precomp Cyl #
	INC	DE
	LD	A,8		; Shugart ECC = 8, Xebec = 11
	LD	(DE),A

	LD	A,(HL)		; Get Step Rate for Read/Write
	LD	(HDSTEP),A

; Data Block is all built, Send it to the Drive

	LD	DE,INIBUF	; Point to Initialization Buffer
	LD	HL,HDCOMD	; Point to start of Comnd Block
	LD	B,5		;  set length of clearance needed
	LD	(HL),0CH	; Stuff Drive Init command
HDINIL:	INC	HL		; Advance
	LD	(HL),0		;  clear one location
	DJNZ	HDINIL		; ..loop til remaining bytes cleared
	JR	STSCSI		; ...and Initialize!

;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
; Write to SCSI Hard Disk Drive			< Internal BIOS Routine >
;  Writes from HSTBUF using HSTTRK and HSTSEC to build Block Number.
; NOTE: This routine uses physical drive characteristics from ICFG-xx.

HDWRIT:	LD	A,10		; Set the Write Command
	DEFB	11H		;   trash DE, fall thru to save

;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
; Read from SCSI Hard Disk Drive		< Internal BIOS Routine >
;  Reads to HSTBUF using HSTTRK and HSTSEC to build Block Number.
; NOTE: This routine uses physical drive characteristics from ICFG-xx.

HDREAD:	LD	A,8		; Set the Read Command
	LD	(HDCOMD),A	;   save command in CDB
	LD	HL,(HSTDPH)	; Get pointer to desired DPH
	DEC	HL		;  back up to Device #
	LD	A,(HL)		;   and fetch
	CALL	SELHDA		; Select this device from A-Reg
	LD	DE,HDCOMD+1	; Point to second byte of Command Block
	LD	BC,4*256+0	; Count = 4, MSB of Block # = 0
	LD	HL,(HSTTRK)	; Get requested track
MUL16:	ADD	HL,HL		; Multiply C,H,L by 16 for 21-bit block #
	RL	C		;  shifting overflow bit to C
	DJNZ	MUL16		; ..and looping til * 16
	LD	A,(DE)		; Get LUN/High Address
	AND	11100000B	;  keep only LUN
	OR	C		;   and add in High 5 bits of Block #
	LD	(DE),A		; Store back in LUN/High Address
	INC	DE		; Pt to next
	LD	A,H		; Get middle Block #
	LD	(DE),A		;   and save
	INC	DE		; Pt to next
	LD	A,(HSTSEC)	; Get Logical Host Sector # (4-bits)
	ADD	A,L		;  add in Hi 4-bits of low Block #
	LD	(DE),A		;   save lowest 8 bits of Block #
	INC	DE		; Pt to next
	LD	A,1
	LD	(DE),A		; Set HDSIZ for 1 block
	INC	DE		; Pt to next

	LD	A,(CNTRLR)	; Is this a Xebec 1410?
	CP	2
	LD	A,0		;  (preset No)
	JR	NZ,HDWR0	; ..jump if Not Xebec or Shugart 1610-3
	LD	A,(HDSTEP)	; Get Step Rate byte
	OR	A		; Is it 3 mS?
	JR	Z,HDWR0		; ..jump if so
	ADD	A,3		; Else 1 -> 4, 2 -> 5, 3 -> 6

HDWR0:	LD	(DE),A		; Set control byte in Command Block

; Try the Command specified.  If errors returned (e.g. Attn assertion),
;  read the SCSI Sense status and try the command again.  This solves the
;  Connor and Quantum drive access problems.

RWSCSI:	CALL	HDRW0		; Try a Normal Data Access
	RET	Z		; ..exitting if Ok
	LD	HL,SENSE	; Set Ptr to Sense Command Block
	LD	DE,SNSDAT	;  and Sense Data Poiner
	CALL	HDRW1		; Try a Sense Read, following thru to Dat Rd
HDRW0:	LD	DE,HSTBUF	;  and Data Pointer for Normal Accesses
STSCSI:	LD	HL,HDCOMD	; Set Command Block Address
HDRW1:	LD	(HDCMDV),HL	; Save Command Block Address
	LD	(HDDATV),DE	;   and Data Area Pointer
	  IF  NOWAIT		; If Wait States not desired..
	IN0	A,(DCNTL)	; Get current settings
	LD	(WTSAVE),A	;  save for exit
	AND	11001111B	;   Keep everything but IO Waits
	OUT0	(DCNTL),A	;    and set to No IO Wait States
	  ENDIF		;nowait
			;..fall thru to change phases on the SCSI bus
	CALL	SCSI		; Do the Work
	AND	00000010B	; Any errors?
	LD	(ERFLAG),A	;   save resulting status here
	RET

;========================================================================
; Function 2 - Direct SCSI driver.  This routine performs the function
;  described by the command in the HD Command Descriptor Block addressed
;  by DE.  At the end of the function, 512 bytes of data are transferred
;  from the Bios IO Buffer to the Users Space set by Fcn 0.
;
; Enter: DE = Pointer to User Command Descriptor Block.
;	  A = 0 if No Data to be Written, FF if User-supplied data to write
; Exit :  H = Message Byte value
;	  L = Status Byte value
;	  A = Status byte, Flags set accordingly.
; Uses : AF,BC,DE,HL
; NOTE : Routine assumes the Command Block is properly configured for the
;	 desired function and device.  Errors in phasing result in program
;	 exit and Warm Boot function, while Timeout returns 0FFH.
; For external access, It assumes the user has used Functions 0 and 1 to
; set the data transfer source/dest address and logical & physical drive.
;========================================================================

HD_RW:	PUSH	AF		; Save User Data Flag
	PUSH	DE		;  and ptr to User's CDB
	CALL	FLUSH		; Insure Host Buffer is Free
	POP	HL		;   restore User CDB ptr to HL for move
	  IF  BANKED
	CALL	SHDBNK		; Load Banks for transfer to System fm User
	CALL	XMOVE		;   and Set
	  ENDIF		;Banked
	LD	DE,HDCOMD
	LD	BC,10		; Move a 10-byte block
	CALL	MOVE		;   into SCSI Command area
	POP	AF		; Restore Flag
	OR	A		; Any User data to write?
	JR	Z,DOSCS0	;   bypass move if not
	  IF  BANKED
	CALL	SHDBNK		; Load for move from User's to System Banks
	CALL	XMOVE		;   and Set
	  ENDIF		;Banked
	CALL	HDDMOV		; Set to move 512 bytes from User to Hstbuf
	CALL	MOVE		; Do It!
DOSCS0:	CALL	RWSCSI		; Set Data Addr and do the operation
	  IF  BANKED
	CALL	SHDBNK		; Load Bank Numbers
	LD	A,B		; Swap
	LD	B,C		;  Source
	LD	C,A		;   and Destination Banks
	CALL	XMOVE		; Set Source/Dest
	  ENDIF		;Banked
	PUSH	HL		; Save Status and Message bytes
	CALL	HDDMOV		;  set Addresses and Length
	EX	DE,HL		;   write back to User's area
	CALL	MOVE		;    move without affecting status in A
	POP	HL		; Restore Status and Message bytes
	LD	A,L		; Load Status byte for checks
	AND	0010B		;  keep only Check Status bit
	RET			;   and quit

;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Raw SCSI Driver

SCSI:	LD	HL,LUNSAV	; Address LUN storage location
	LD	A,(HDUNIT)	; Get LUN/HiBlock byte from Command Blk
	AND	1FH		;  Strip off old LUN
	OR	(HL)		;   add in New LUN
	LD	(HDUNIT),A	;    save new byte

	XOR	A
	OUT	(NCRCMD),A	; Clear any previous Controller junk
	OUT	(NCRMOD),A
	OUT	(NCRTGT),A

	LD	A,(HDEVIC)	; Get the Target Device address bit
	OR	10000000B	;   add Host initiator address bit
	OUT	(NCRDAT),A
	IN	A,(NCRCMD)	; Get Initiator Comnd Reg
	OR	B_ABUS		;  Get the Data Bus
	OUT	(NCRCMD),A
	LD	A,B_ASEL+B_ABUS	; Now Claim both Select and Data Bus bits
	OUT	(NCRCMD),A

; Wait 200 to 300 ms (average 250) for Target to become Busy

	LD	L,0FFH		; Preset Timeout Error Status
	LD	A,3		; Get # of 1/10 secs
	LD	(MTM),A		;   stash in downcounter

BSYWT:	LD	A,(MTM)		; Get current count
	OR	A		; Have we timed out?
	JR	Z,TIMOUT	; ..exit to Error if so
	IN	A,(NCRBUS)	; Get the Current Bus Status
	AND	B_BSY		;  Is it BSY ?
	JR	Z,BSYWT		; ..loop if Not
			;..else fall thru
	LD	A,B_ABUS
	OUT	(NCRCMD),A	; Grab the Bus without the Select Command
	XOR	A
	LD	(STATUS),A	;  assume status is Ok
	OUT	(NCRCMD),A	;   then free the Data Bus
			;..fall thru to change phases on the SCSI bus
;.....
; Come here when phases change

PHASE:	IN	A,(NCRBUS)	; Read the Bus Status
	AND	B_MSG+B_CD+B_IO	;  keep the three phases we are interested in
	RRA			; Rotate Phase status bits
	RRA			;   into B0-2 position for testing
	OUT	(NCRTGT),A	; Check for phase match
	LD	C,NCRDAT	;  with data going to/from this port
	LD	HL,MESSAGE	;  (Ph 7 input goes here)
	CP	7		; Are we in Phase 7 ?
	JR	Z,HDIN		; ..jump if so to Message In Phase
	LD	HL,(HDDATV)	;  (Ph 0/1 IO From/To here)
	OR	A		; Are we in Phase 0 ?
	JR	Z,HDOUT		; ..jump to if so to Data Out Phase
	DEC	A		; Are we in Phase 1 ?
	JR	Z,HDIN		; ..jump to if so to Data In Phase
	LD	HL,(HDCMDV)	;  (Ph 2 output from here)
	DEC	A		; Are we in Phase 2 ?
	JR	Z,HDOUT		; ..jump to if so to Command Out Phase
	LD	HL,STATUS	;  (Ph 3 Input to here)
	DEC	A		; Are we in Phase 3 ?
	JR	Z,HDIN		; ..jump to if so to Status In Phase
			;..else fall thru
; Phases 4, 5 and 6 wind up here in an Error

	  IF  NOWAIT
	CALL	RSWAIT		; Restore IO Wait Settings if altered
	  ENDIF
	CALL	PRINT
	DEFB	CR,LF,' Phase Err',CR,LF+80H

	  IF  BANKED
	JP	ABORT		; Use this error exit if banked
	  ELSE
	RST	0
	  ENDIF		;banked

; Enter with HL pointing to buffer, C addressing NCR Data Port

HDIN:	IN	A,(NCRBUS)	; Check the Bus
	BIT	5,A		; Do we have a REQuest?
	JR	NZ,HDIN1	; ..jump if so to read it
	AND	B_BSY		; Is the Bus Busy?
	JR	NZ,HDIN		; ..loop if so

HDEXIT:	XOR	A		; Else we are finished.  Clean up & Quit
	OUT	(NCRCMD),A	;  Clear Initiator Command Register
	OUT	(NCRTGT),A	;   and Target Command Register
	LD	HL,(STATUS)	; Get Message (H) and Status (L) bytes
TIMOUT:
	  IF  NOWAIT
RSWAIT:	LD	A,(WTSAVE)	; Get entry Wait state settings
	OUT0	(DCNTL),A	;   and restore
	  ENDIF
	LD	A,L		; Get Status byte
	OR	A		;   Set Return Status Ok if Status Byte = 0
	RET

HDIN1:	IN	A,(NCRST)	; Get SCSI Status
	AND	B_PHAS		; Do the Phases Match?
	JR	Z,PHASE		; ..quit here if Not and clear
	INI			; Get a byte from Port (C) to Memory at (HL)
	LD	A,B_AACK
	OUT	(NCRCMD),A	;  ACKnowledge the byte
	XOR	A
	OUT	(NCRCMD),A	;  clear *ACK bit
	JR	HDIN		; ..and back for more

; Enter with HL pointing to buffer, C addressing NCR Data Port

HDOUT:	LD	A,B_ABUS	; Assert Data Bus
	OUT	(NCRCMD),A
	IN	A,(NCRBUS)	; Check the SCSI Bus
	BIT	5,A		; Do we have a REQuest?
	JR	NZ,HDOUT1	; ..jump if So to Send a byte
	AND	B_BSY		; Else is the Bus Busy?
	JR	NZ,HDOUT	; ..loop if so because we have more to go
	JR	HDEXIT		; Quit

HDOUT1:	IN	A,(NCRST)	; Get current Status
	AND	B_PHAS		; Do we have a Phase Match?
	JR	Z,PHASE		; ..quit here if Not and clear

	OUTI			; Send a byte from (HL) to Port (C)
	LD	A,B_AACK+B_ABUS
	OUT	(NCRCMD),A	; Set ACKnowledge and BUS bits
	XOR	A
	OUT	(NCRCMD),A	;  clear *ACK and *BUS
	JR	HDOUT		; ..and back for more

;.....
; Set Banks for possible Move to the System Bank from Users source bank

	  IF  BANKED
SHDBNK:	LD	A,(USP-1)	; Get User's Bank Register value
	RRA			; Rotate
	RRA			;  to
	RRA			;   Bank Byte
	AND	1FH		; Mask off junk
	LD	C,A		;   save in place
	LD	A,(SYSBNK)	; And this System Bank
	LD	B,A		;  in place
	RET			;   and return to caller
	  ENDIF		;banked

;.....
; Set for actual move of 512 bytes from User's Data Addr to Hstbuf

HDDMOV:	LD	HL,(DATADR)	; Set source pointer
	LD	DE,HSTBUF	;  destination pointer
	LD	BC,512		;   and length of 512 bytes
	RET			;    back for direction chk and move

;.....
; SCSI Read Sense Command Data Block

SENSE:	DEFB	03H		; SCSI Sense Command
	DEFB	00,00,00,04,00	;   remainder of Sense Command Block

	  IF  BANKED
	COMMON	/B2RAM/
	  ELSE
	DSEG
	  ENDIF

HDCMDV:	DEFS	2		; Storage for current Command Data Block
HDDATV:	DEFS	2		; Storage for current Data Transfer Area
SNSDAT:	DEFS	4		; Storage for Sense Data Transferred

; SCSI Controller Command Block

HDCOMD:	DEFS	1		; Command Byte
HDUNIT:	DEFS	1		; B7-5 = Unit #, remainder is Hi-Addr
HIBLK:	DEFS	1		; Mid-Addr
LOBLK:	DEFS	1		; Lo-Addr
HDSIZ:	DEFS	1		; Number of Blocks to Read/Write (1=512 bytes)
HDCTL:	DEFS	1
	DEFS	4		;   pad for 10-byte Command Block
CMDSIZ	EQU	$-HDCOMD	; Size of Command Block

DATADR:	DEFS	2		; Pointer to User Buffer Space (user bank)

HDSTEP:	DEFS	1		; Step Rate Byte for Xebec/Shugart
INIBUF:	DEFS	9		; Buffer for Xebec/Shugart 1610-3 Init.

;<<--- WARNING! --- Do not re-order the following Two Bytes --->>

STATUS:	 DEFS	1		; Ending Status Byte
MESSAGE: DEFS	1		; Ending Message Byte

HDEVIC:	 DEFS	1		; Target Device address bit
LUNSAV:	 DEFS	1		; Storage for LUN
	  IF  NOWAIT
WTSAVE:	 DEFS	1		; Storage for Entry Wait State Setting
	  ENDIF
;======================= End of SCSI-18 ===========================
