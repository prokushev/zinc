;:::::::::::::::::::::::::::::::::::::::::::::::::::***********************
;  CBOOT.	B/P BIOS Cold Boot Module.	    ** Hardware Specific **
;  This MUST be the Last Module in the BIOS	    ** for prompts, Env  **
;   because it is overwritten by RAM Data.	    ** and Termcap Dflts **
;          - MicroMint SB-180 -			    ***********************
;
; 1.3 -  5 Jun 04 - Cleaned up for GPL release.				HFB
; 1.2 - 23 Nov 95 - Updated General Release.				HFB
; 1.1 - 27 Feb 93 - General Release Updated to Current Specs, cut out
;		much initialization on Boot Track assembly.		HFB
; 0.0 - 22 Jun 91 - Initial Test Release.				HFB
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

	DSEG
;.....
; Cold boot entry.  This code is executed only once and so may be
;  overwritten subsequently by the BIOS.  In Non-banked systems, this code
;  is placed in the Host Buffer, HSTBUF, allowing up to 1024 bytes in the
;  section, although much less will fit on the boot tracks.  In Banked
;  systems, a small resident part (up to 128 bytes) occupies the Directory
;  Sector Buffer, DIRBUF, while the remainder is placed in the banked
;  HSTBUF, allowing both sectors to be overwritten without penalty.
;  To insure minimum disruption in assembling and linking the BIOS, this
;  module must be one of the first linked to place HSTBUF/DIRBUF at the
;  beginning of B2RAM and DSEG.

CBOOT:	DI			; Disable interrupt system

	CALL	MOTOFF		; Turn Floppy motors off, clear timer

	LD	A,(HICOMM)	; Set Common Bank start to Header loc'n
	OUT0	(CBAR),A	; NOTE: Must retain this even in Non-banked
				;  versions to allow applications such as TDD
				;  and possibly RAM Drives to properly switch
				;  memory banks.
			    ; Set Int table early in case of spurious Int
	LD	HL,INTTBL	; Set the Interrupt Vector
	LD	A,H		;  first the page
	LD	I,A		;   to CPU Register
	OUT0	(IL),L		;    then the segment addr

	LD	HL,(IOBYT)	; Get Default Drive/User and IOBYTE
	LD	(3),HL		; ..Set values in TPA bank

	  IF  BANKED
	LD	SP,USP		; Set to User Stack in High memory

	CALL	GOSYSB		; Turn on the System bank
	XOR	A
	LD	(BIOSTK),A	; Init bank switcher and set Default
	LD	(3),HL		;  Drive/User and IOBYTE in System bank

	CALL	CBOOT0		; Execute main part of Cold Setup

	LD	A,(TPABNK)
	CALL	SELBNK		; Insure TPA is in context
	  ELSE
	LD	SP,80H		; Set stack in Low memory
	CALL	CBOOT0		; Execute main part of Cold Setup
	  ENDIF

	  IF  NOT MOVCPM
	LD	HL,003CH	;; Point to ZMP Flag
	LD	(HL),0E5H	;;  and say this is First Time Run
	  ENDIF

	  IF  FASTWB
	LD	HL,BTTBL	; Point to DMA block moving to Alt Bank
	JP	WBOOTV		; ..move it and commence execution
	  ELSE
	JP	GOZSYS		; Otherwise just go to Command Processor
	  ENDIF

	  IF  BANKED
	COMMON	/B2RAM/
	  ENDIF

; If this system is Banked and set for Zsdos2, then ALV Buffers are in the
; System Bank and will be dynamically sized during Cold Boot.  This permits
; BPCNFG to configure a generic IMG file for specific Hard Drive Partitions.

CBOOT0:	LD	HL,BRAME	; Get end of banked RAM
	LD	(HISAV),HL	;   save in low memory for later use
	  IF  HARDDSK
	LD	HL,DPHTBL	; Point to start of DPH Table
	LD	B,16		;  do all DPHs
DYNLP:	LD	E,(HL)
	INC	HL
	LD	D,(HL)		; Get the pointer for this one
	INC	HL		;   advance to next
	LD	A,D		; Anything there?
	OR	E
	JR	Z,DYNCHK	; ..jump to end if Nothing
	DEC	DE		; Else back up Ptr to Driver
	DEC	DE
	LD	A,(DE)		; Get Driver #
	   IF  RAMDSK
	DEC	A
	DEC	A		; Hard Disk (Driver #2)?
	JR	Z,ADDSIZ	; ..jump if So
	DEC	A		; RAM Disk (Driver #3)?
	   ELSE
	CP	2		; Hard Disk (Driver 2)?
	   ENDIF	;RamDsk
	JR	NZ,DYNCHK	; ..jump to end if Not
ADDSIZ:	PUSH	BC		; Save loop counter
	PUSH	HL		;  and ptr to DPH
	EX	DE,HL
	LD	DE,12		; Offset to DPB Ptr (+2 for Decs)
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)		; Get Addr of this DPB
	INC	HL
	INC	HL
	INC	HL		; Advance to ALV Addr location
	LD	BC,(HISAV)	;  get end of used RAM
	LD	(HL),C		;   and save
	INC	HL
	LD	(HL),B		;    in DPH
	LD	HL,5
	ADD	HL,DE		; Advance to Size in DPB
	LD	E,(HL)
	INC	HL
	LD	D,(HL)		;   fetch Size-1
	INC	DE		; Make = Size in Blocks
	PUSH	BC		;  (save End Addr in BC)
	LD	B,3
DVRAME:	SRL	D		; Divide by 2
	RR	E
	DJNZ	DVRAME		;  * 3 = Div 8
	INC	DE		;   + 1
	EX	DE,HL
	POP	BC		; Restore Ram End
	ADD	HL,BC		; Add size to Starting Location
	LD	(HISAV),HL	;   save for next drive
	POP	HL		; Restore DPH ptr
	POP	BC		;   and loop ctr
DYNCHK:	DJNZ	DYNLP		; Loop til all 16 tested
	  ENDIF		;harddsk

; We clear all memory from top of Our DSEG to base of ENV to avoid much
; data initialization.

	  IF  BANKED
	LD	DE,USP		; Point above critical Bios Ram storage
	  ELSE
	LD	DE,DIRBUF
	  ENDIF
	  IF  Z3
	LD	HL,(ENVADR)	; And top of memory
	  ELSE
	LD	HL,0FFFFH
	  ENDIF
	SBC	HL,DE		; Calculate # bytes to clear (C clear already)
	EX	DE,HL		; Ptr to HL, Count to DE
Clr0:	LD	(HL),0		; Clear a byte
	INC	HL		;  pt to Next
	DEC	DE		;   count down
	LD	A,D
	OR	E		; End Yet?
	JR	NZ,Clr0		; ..loop if Not til completion

; On all configurations other than boot tracks, we also clear above ENV

	  IF  NOT MOVCPM
	LD	HL,(ENVADR)	; Clear above the ENV as well
	LD	DE,100H		;  (assume 1-rec ENV, 1-rec TCAP)
	ADD	HL,DE		; Are we already at the top of memory?
	JR	C,ATTOP		; ..jump to bypass clearing if so
	EX	DE,HL		; Else we must calculate how much to clear
	LD	HL,0FFFFH	; From the Top
	SBC	HL,DE		;  subtract the start
	LD	C,L
	LD	B,H		;   and use for count
	LD	L,E		; Copy Start to Source
	LD	H,D
	INC	DE		;  dest is same + 1
	LD	(HL),0		;   we fill with Zeros
	LDIR			; Do it!

; Initialize the ZCPR3 buffers

ATTOP:	LD	HL,(ENVADR)	; Should we move our local ENV block?
	LD	A,H
	OR	L
	JR	NZ,BMOVE	; ..jump if we already have one
	  ENDIF			; (Always move Env if using MOVCPM type load)
	LD	HL,Z3ENV	; Else set up pointers
	LD	(ENVADR),HL
	LD	DE,ENV
	EX	DE,HL
	LD	BC,ENVEND-ENV	;  count
	LDIR			;   and move
	  IF  MOVCPM	    ; Instead of storing Termcap bytes, Zeroize
	LD	H,D
	LD	L,E		; Dupe dest addr
	LD	(HL),0		;  Clear current byte
	LD	BC,37-1		;   Count to remaining Termcap area
	INC	DE		;    Dest is next byte
	LDIR			;     Move Zero Along
	  ENDIF		;Movcpm
BMOVE:
	  IF  NOT MOVCPM
	LD	DE,(ENVADR)	; Get pointer to ENV
	   IF  HAVIOP
	LD	HL,0FH		; Offset in ENV to IOP Vector
	CALL	CALCOF		;  get address and size
	LD	(IOPADR),HL	;   and set addr in Move block
	   ENDIF	;haviop
	LD	HL,18H		; Offset in ENV to Mult Comnd Line
	CALL	CALCOF		;  get addr & Size
	LD	(CLADR),HL	;   set addr in Move block
	INC	HL		; Advance to Autostart command
	INC	HL		;  at MCL+3
	INC	HL
	LD	(CL3ADR),HL	;   and set it in Move block
	INC	HL		; Advance to MCL+4
	LD	(CMDSET),HL	;  save as initial MCL Pointer
	LD	(CMDSET+2),A	;   and MCL Size byte as well
	LD	HL,09H		; Offset in ENV to Path Vector
	CALL	CALCOF		;  get address
	LD	(PTHADR),HL	;   save in Move block
	  ENDIF		;Not Movcpm
	  IF  FASTWB		; Do we restore CPR from Bank?
	   IF  MOVCPM
	LD	BC,BIOSJT-1600H	; Get CPR Starting Addr
	LD	HL,0800H	;  and Default Length
	   ELSE		;~Movcpm
	LD	HL,(ENVADR)	; Get pointer to ENV start
	LD	DE,3FH		;  offset to CPR start
	ADD	HL,DE
	LD	C,(HL)		;   and get CPR starting address
	INC	HL
	LD	B,(HL)
	INC	HL		;  (advance to length)
	LD	H,(HL)		; Get length in blocks (*2 at this point)
	LD	L,0		;   convert to Word
	SRL	H		; Compute Blks * 128
	RR	L		;   to give HL = CPR length in bytes
	   ENDIF	;~Movcpm
	LD	(BTTBL+6),HL	; Save length in boot block
	LD	(SARL+6),HL	;   and DMA WB block
	LD	HL,(TPABNK)	; Get TPA (L) and System (H) Banks
	LD	A,L		; Load TPA Bank #
	RL	B		; Move MSB of Address to Carry
	ADC	A,0		; Add Carry to Bank # (in case cross banks)
	RRA			;  shift for DMA Bank #
	LD	(SARL+5),A	;   save in Warm Boot DMA Block
	LD	(BTTBL+2),A	;    and initial move to bank
	RR	B		; Move Bank # LSB (Carry) to MSB of Address
	LD	(SARL+3),BC	; Save CPR logical address in WB DMA block
	LD	(BTTBL),BC	;   and initial move to bank
	LD	A,H		; Load System Bank #
	LD	HL,100H		; Load Bank Address of CPR Image Start
	RL	H		;  get rid of MSB
				;   since we know the MSB=0, bypass adc 0
	RRA			; Shift for DMA Bank #
	LD	(BTTBL+5),A	;  save as initial dest bank byte
	LD	(SARL+2),A	;   and DMA Source Bank byte
	RR	H		; Rotate Carry (Bank LSB) to MSB of Address
	LD	(SARL),HL	; Save Source Addr in WB DMA block
	LD	(BTTBL+3),HL	;   and initial move block
	  ENDIF		;fastwb

	  IF  BANKED
	LD	HL,0000		; If we are banked, set to copy Page 0
	LD	A,(TPABNK)	;  of TPA to System Bank
	OR	A
	RRA			; Shift TPA Bank #
	LD	(CPYVEC+2),A	;  store in DMA Block
	RR	H		;   adjust Address by Bank LSB (Carry)
	LD	(CPYVEC),HL	;    and store
	LD	H,0
	LD	A,(SYSBNK)
	RRA			; Shift System Bank #
	LD	(CPYVEC+5),A	;  store in DMA Block
	RR	H		;   adjust Address by Bank LSB (Carry)
	LD	(CPYVEC+3),HL	;    and store
	LD	HL,40H		; Set length of move
	LD	(CPYVEC+6),HL	;   store in DMA Block
	  ENDIF		;banked

	LD	(STKSAV),SP	; Save entry stack since we alter it here
	LD	A,[BLOCKE-BLOCK]/6
	LD	SP,BLOCK
BLKMV:	POP	BC		; And number of bytes to move
	POP	HL		; Source
	POP	DE		; Get destination
	LDIR
	DEC	A		; Another block moved
	JR	NZ,BLKMV	; Do more as required

	LD	SP,(STKSAV)	; Get entry Stack Pointer back so we can return

; All Buffers above BIOS have been cleared already at this point

	DEC	A		; 0 --> FF
	LD	(Z3WHL),A	; Set the Wheel Byte

	  IF  HAVIOP
	LD	HL,IOPRET
	LD	(BIOSJT+1),HL
	  ENDIF		;haviop

; Initialize rest of IO subsystem

	  IF  BANKED
	CALL	JDVINI		; Call directly because we are in High Stack
	  ELSE
	CALL	DEVINI		; Initialize the I/O system
	  ENDIF			; And any device specific ram

	  IF  [BANKED AND ZSDOS2]
	LD	DE,8000H	; If ALVs in Bank, size againse Bank2 Top
	  ELSE
	LD	DE,(USRSP)	;   else against base of User Space
	  ENDIF
	LD	HL,(HISAV)	; Load Highest RAM Address used
	OR	A
	SBC	HL,DE		; Is Needed Space < Limit?
	JR	C,MEMOK		; ..jump if So

	CALL	PRINT		; Else Warn User
	DEFB	CR,LF,7,'++ Mem Ovfl +','+'+80H
MEMOK:

; Sign on the system

	CALL	PRINT
	DEFB	CR,LF,'SB180 '
	DEFB	'B/P 50.00k Bios'	    ;**** Do NOT alter this string ****

	DEFB	'  V ',VERS/16+'0','.',VERS MOD 16+'0','  '  ; Vers in BCD
	DATE

	  IF  BANKED
	DEFB	' (Banked)'
	  ELSE
	   IF  NOT MOVCPM		;1.1 save space
	DEFB	' (Non-Banked)  '
	   ENDIF
	  ENDIF

	  IF  BANKED
	DEFB	' with:',CR,LF,LF,'  ZCPR3+ Env'
	    IF  CLOCK
	     IF  DS1216
	DEFB	CR,LF,'  Dallas SmartWatch '
	       IF  CLKSET
	DEFB	'with '
	       ELSE
	DEFB	'NO '
	       ENDIF
	DEFB	'Set'
	     ELSE
	      IF  ETSCLK
	DEFB	CR,LF,'  ETS180IO+ Clock'
	      ELSE
	DEFB	CR,LF,'  ZSDOS Interrupt Clock'
	      ENDIF	;~Etsclk
	     ENDIF	;~Ds1216
	    ENDIF	;Clock
	    IF  HARDDSK
	DEFB	CR,LF,'  Hard Disk Support'
	    ENDIF
	    IF  FASTWB
	DEFB	CR,LF,'  Warm Boot from RAM'
	    ENDIF
	    IF  RAMDSK
	DEFB	CR,LF,'  RAM Disk (M:)'
	    ENDIF
	    IF  BIOERM
	DEFB	CR,LF,'  Full Error Messages'
	    ENDIF
	  ENDIF		;Banked
	DEFB	CR,LF+80H

	EI			; Turn Interrupts back on
	RET			; ..and return to Main part of CBOOT code

;.....
; Get indexed vector to various segments in ENV

CALCOF:	ADD	HL,DE		; Calculate ptr to ENV Vector of interest
	LD	C,(HL)		;  grab low byte
	INC	HL		;   bump
	INC	HL		;    to Size
	LD	A,(HL)		; Fetch Size byte
	DEC	HL		;  back down to Address
	LD	H,(HL)		;   and grab hi byte
	LD	L,C
	RET			; Return w/Address in HL

; Block Move Parameters

BLOCK:	DEFW	PATH-CMDSET	; # Bytes to Move
	DEFW	CMDSET		; Source Addr
CLADR:	DEFW	Z3CL		; Destination Addr

	DEFW	10
	DEFW	AUTOCMD
CL3ADR:	DEFW	Z3CL+3

	DEFW	PATHE-PATH
	DEFW	PATH
PTHADR:	DEFW	EXPATH

	  IF  HAVIOP
	DEFW	IOPLEN+2
	DEFW	IOPENT
IOPADR:	DEFW	IOP
	  ENDIF

			    ; For moving data to/from bank/buffer
	DEFW	DMALEN		; DMA Control Block Length
	DEFW	DMADAT		; DMA Skeleton starting addr
	DEFW	DMATBL		; DMA Block Starting Addr

BLOCKE	EQU	$

;.....
; Initial DMA Control Block data

DMADAT:	DEFW	HSTBUF		; Physical sector address
	DEFB	00		; BNK2 SHR 1 if banked, BNK0 SHR 1 if not
	DEFW	DMAACK		; Dack port address
	DEFB	0
	DEFW	0400H		; Number of Bytes to Transfer
DMALEN	EQU	$-DMADAT

CMDSET:	DEFW	Z3CL+4		; Point to first character in command buffer
	DEFB	Z3CLS		; Command buffer size
	DEFW	0		; Clear the command line

PATH:	DEFB	'$','$',1,15	; Current, A15:
	DEFB	0		; End of initial path
PATHE	EQU	$

; Environment Descriptor for ZCPR34

ENV:	JP	0		; Leading jump (address is CBIOS when NZCOM)
ENV1:				; ZCPR3 enviornment descriptor ...
	DEFB	'Z3ENV'		; Environment id
	DEFB	81H		; Env type (=>80H means extended ENV)
	DEFW	EXPATH		; External path (path)
	DEFB	EXPATHS		;
	DEFW	RCP		; Resident command package (rcp)
	DEFB	RCPS		;
	DEFW	IOP		; Input/output package (iop)
	DEFB	IOPS		;
	DEFW	FCP		; Flow command package (fcp)
	DEFB	FCPS		;
	DEFW	Z3NDIR		; Named directories (ndr)
	DEFB	Z3NDIRS		;
	DEFW	Z3CL		; Command line (cl)
	DEFB	Z3CLS		;
	DEFW	Z3ENV		; Environment (env)
	DEFB	Z3ENVS		;
	DEFW	SHSTK		; Shell stack (sh)
	DEFB	SHSTKS		;
	DEFB	SHSIZE		;
	DEFW	Z3MSG		; Message buffer (msg)
	DEFW	EXTFCB		; External fcb (fcb)
	DEFW	EXTSTK		; External stack (stk)
	DEFB	0		; Quiet flag (1=quiet, 0=not quiet)
	DEFW	Z3WHL		; Wheel byte (whl)
	DEFB	4		; Processor speed (mhz)
	DEFB	'P'-'@'		; Max disk letter
	DEFB	31		; Max user number
	DEFB	1		; 1 = Ok to accept DU:, 0 = Not Ok
	DEFB	0		; Crt selection			()
	DEFB	0		; Printer selection		()
	DEFB	80		; Crt 0: width
	DEFB	24		; # of lines
	DEFB	22		; # of text lines

; In Extended ENV, CRT 1 is replaced by System Info

;;	DEFB	132		; . CRT 1: Width
;;	DEFB	24		;	 # of lines
;;	DEFB	22		;	 # of text lines

; The Drive Vector is a 16-bit word in which a "1" bit indicates that a drive
; is active in the system.  The bits are arranged as: PONMLKJIHGFEDCBA.  When
; stored in memory, it is in normal form with the Low byte stored first.

E_DRVL	DEFL	[DRV_A & 1] + [DRV_B & 2] + [DRV_C & 4] + [DRV_D & 8]
E_DRVL	DEFL	E_DRVL + [DRV_E & 16] + [DRV_F & 32] + [DRV_G & 64]
E_DRVL	DEFL	E_DRVL + [DRV_H & 128]		; Low Byte Formed
E_DRVH	DEFL	[DRV_I & 1] + [DRV_J & 2] + [DRV_K & 4] + [DRV_L & 8]
E_DRVH	DEFL	E_DRVH + [DRV_M & 16] + [DRV_N & 32] + [DRV_O & 64]
E_DRVH	DEFL	E_DRVH + [DRV_P & 128]		; High Byte Formed

	DEFW	E_DRVH * 256 + E_DRVL
	DEFB	0		;				(Reserved)

	DEFB	80		; Prt 0: width
	DEFB	66		; # of lines
	DEFB	58		; # of text lines
	DEFB	1		; Ff flag (1=can form feed)

;========= Usurped for use by Resident User Area Vectors =========
;;	DEFB	96		; Prt 1: width
;;	DEFB	66		; # of lines
;;	DEFB	58		; # of text lines
;;	DEFB	1		; Ff flag (1=can form feed)

	DEFB	USPCS		; Remaining Records in Res. User Area
USRSP:	DEFW	USPC		; Res. User Area Base Address (xx00h/xx80h)
	DEFB	USPCS		; Size of Res. User Area in 128-byte recs
;=========================================================================
; In Extended ENV, Printers 2 and 3 are gone, replaced by System Info

;;	DEFB	132		; . PRT 2: Width
;;	DEFB	66		;	 # of lines
;;	DEFB	58		;	 # of text lines
;;	DEFB	1		;	 FF flag (1=can form feed)
;;	DEFB	132		; . PRT 3: Width
;;	DEFB	88		;	 # of lines
;;	DEFB	82		;	 # of text lines
;;	DEFB	1		;	 FF flag (1=can form feed)
	DEFW	CPR		; Ccp base address
	DEFB	[DOS-CPR]/128	; Size of ccp in 128 byte records
	DEFW	DOS		; Bdos base address (xx00h or xx80h)
	DEFB	[BIOSJT-DOS]/128 ; Bdos buffer size in 128 byte records
	DEFW	BIOSJT		; Bios base address (nzbio if nzcom running)
	DEFB	'SH      '	; Shell variable filename
	DEFB	'VAR'		; Shell variable filetype
	DEFB	'        '	; File 1
	DEFB	'   '		;
	DEFB	'        '	; File 2
	DEFB	'   '		;
	DEFB	'        '	; File 3
	DEFB	'   '		;
	DEFB	'        '	; File 4
	DEFB	'   '		;
	DEFB	0		; Public drive area (zrdos +)
	DEFB	0		; Public user area (zrdos +)
				; Env 128 bytes long

;***************************************************************************
; This TermCap Data for the New Z-System complies with VLIB4D specs and more
; fully describes the terminal and its capabilities.  Edit the fields with
; values for your terminal characteristics, or use it as a template for an
; outboard definition loaded from the Startup file.

ENV2:	DEFB	'             '	; Terminal Name (13 bytes, space terminated)

	  IF  MOVCPM	    ; Dummies for boot track systems
B13:	DEFB	0
B14:	DEFB	0		; Bit 7 = Normal TCAP
	  ELSE
B13:	DEFB	GOELD-ENV2	; Offset to GOELD in graphics section
B14:	DEFB	10000000B	; Bit 7 = Extended TCAP, remainder undefined
	  ENDIF		;~Movcpm

; B15 b0   Standout		0 = Half-Intensity, 1 = Reverse Video
; B15 b1   Power Up Delay	0 = None, 1 = 10-second delay
; B15 b2   No Wrap		0 = Line Wrap, 1 = No Wrap if char written
;				    to last character in line
; B15 b3   No Scroll		0 = Scroll, 1 = No Scroll if char written
;				    to last char in last line of diplay
; B15 b4   ANSI			0 = ASCII, 1 = ANSI

B15:	DEFB	00000000B	; Reverse Vid, Wrap, Scroll, ASCII
			; Additional single character cursor motion bytes
	DEFB	'E'-'@'		; Cursor Up
	DEFB	'X'-'@'		; Cursor Down
	DEFB	'D'-'@'		; Cursor Right
	DEFB	'S'-'@'		; Cursor Left

	  IF  NOT MOVCPM    ; Omit in boot systems to save space
			    ; Instead, we simply zero remainder
	DEFB	0		; CL Delay for Screen Clear
	DEFB	0		; CM Delay for Cursor Motion
	DEFB	0		; CE Delay for Clear to End-of-Line
			; Strings start here
	DEFB	0		; (CL) Home Cursor and Clear Screen
	DEFB	0		; (CM) Cursor Motion
	DEFB	0		; (CE) Clear to End-of-Line
	DEFB	0		; (SO) Reverse On
	DEFB	0		; (SE) Reverse Off
	DEFB	0		; (TO) Terminal Init
	DEFB	0		; (TE) Terminal De-init
			; Extensions to Standard Z3TCAP
	DEFB	0		; (LD) Delete Line
	DEFB	0		; (LI) Insert Line
	DEFB	0		; (CD) Clear from Cursor to End-of-Scr
			; Attributes setting parameters
	DEFB	0		; Set Attributes
	DEFB	0		; Attributes String
			; Read items from screen
	DEFB	0		; Report Cursor Pos'n (ESC Y Pn Pn)
	DEFB	0		; Read Line Under Cursor

GOELD:	DEFB	0		; On/Off Delay
			; Graphics strings offset from Delay value.
	DEFB	0		; Graphics On
	DEFB	0		; Graphics Off
	DEFB	0		; Cursor Off
	DEFB	0		; Cursor On
			; Graphics Characters
	DEFB	'*'		; Upper-Left corner			[*]
	DEFB	'*'		; Upper-right corner			[*]
	DEFB	'*'		; Lower-Left corner			[*]
	DEFB	'*'		; Lower-right corner			[*]
	DEFB	'-'		; Horizontal Line			[-]
	DEFB	'|'		; Vertical Line				[|]
	DEFB	'*'		; Full Block (hashed block)		[*]
	DEFB	'#'		; Hashed Block (big X)			[#]
	DEFB	'+'		; Upper Intersect (Upside down "T")	[+]
	DEFB	'+'		; Lower Intersect ("T")			[+]
	DEFB	'+'		; Mid Intersect (Crossing Lines)	[+]
	DEFB	'+'		; Right Intersect ("T" rotated left)	[+]
	DEFB	'+'		; Left Intersect ("T" rotated right)	[+]
	DEFB	0
	DEFB	0
	  ENDIF		;~Movcpm
ENVEND:

; IOP initial data

	    IF  HAVIOP
IOPENT:	JP	IOPEND
	JP	IOPEND
	JP	IOPEND
	JP	IOPEND
	JP	CONST
	JP	CONIN
	JP	CONOUT
	JP	LIST
	JP	AUXOUT
	JP	AUXIN
	JP	LISTST
	JP	IOPEND
	JP	IOPEND
	JP	IOPEND
	JP	IOPEND
	JP	IOPEND
	DEFB	'Z3IOP'
	DEFB	'DUMMY   '
IOPLEN	EQU	$-IOPENT
IOPEND	EQU	IOP+IOPLEN
	XOR	A
	RET
	    ENDIF	;haviop

BCODEE	EQU	$
	  IF  BANKED
INITCS	EQU	BCODEE-CBOOT0	; Size of Banked (B2RAM) part of Init Code
	  ELSE
INITCS	EQU	BCODEE-CBOOT	; Size of Complete Init Code in DSEG
	  ENDIF

STKSAV:	DEFS	2		; Storage for Pointer while moving
HISAV:	DEFS	2		; Storage for Hi-ALV address

	  IF  FASTWB
	DSEG
BTTBL:	DEFS	8		; Initial WB DMA Block
	  ENDIF
;======================== End of CBOOT =============================
