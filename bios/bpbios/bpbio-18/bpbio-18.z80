;*****************************************************************************
; BP-BIOS.   Banked, Portable BIOS.
;	Copyright (c) 1989/90/91 by Cameron W. Cotrill and Harold F. Bower
;
;  This program is free software; you can redistribute it and/or modify it
;  under the terms of the GNU General Public License as published by the
;  Free Software Foundation; either version 2 of the License, or (at your
;  option) any later version.
;
;  This program is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;  General Public License for more details.
;
;  You should have received a copy of the GNU General Public License
;  along with this program; if not, write to the Free Software
;  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
;---------------------------------------------------------------------------
;    This BIOS is broken into modules that allow it to be ported across a
; wide variety of Z80 compatible systems.  All hardware specific drivers
; are isolated to separate modules.  All hardware independent modules
; (such as deblocking and IO redirection) are similarly broken out.
;
; The BP BIOS supports IOBYTE, but in a unique manner.  At least four
; physical devices are defined - COM1, COM2, PIO, and NULL.  The first
; four of which may be assigned to the CON, AUXIN, AUXOUT, and LST
; logical devices by the I/O byte.  The NULL device is a bit bucket for
; output, and returns nulls for input.
;
; IOBYTE DESCRIPTION:	LIST	AOUT	AIN	CON
;	D7->D0		 XX	 XX	 XX	 XX
;
; XX:	00=COM1    01=COM2    10=PIO	11=NULL
;
; If more than four devices are defined, the Version number is changed
; to greater than or equal to 20H (2.0 or later) to allow swapping of
; devices for greater flexibility.  To minimize size requirements for Boot
; Track assembly, only the primary four devices are included, and the
; Version Number is set less than 20H (1.x), and swapping is prohibited.
; See the source code to BPCNFG to see how this is accomplished.

;++++++++++++ MicroMint SB-180 Computer with ETS180IO+ Support +++++++++++++
;
; This configuration of the B/P Bios is for the MicroMint SB-180 computer
; with optional support for the ET Systems' ETS180IO+ Expansion board as
; well as the compatible MicroMint SCSI Expansion board.  The primary chips
; and functions implemented in this bios are:
;
;  Hitachi HD64180	Enhanced Z80 CPU, MMU, DMA
;	ASCI0		COM1 Asynchronous Serial, RS-232 (usually AUX:)
;	ASCI1		COM2 Asynchronous Serial, RS-232 (usually CON:)
;	CTC1		Optional 'heartbeat' clock, BP timer
;
;  SMS 9266 FDC		NEC 765-derivative Floppy Disk Controller
;				Interrupt-controlled DMA transfers
;
;  74LS273/74LS74	Parallel Output (Printer) port, Interrupt ACK
;
;  256k DRAM		On-board RAM, occupies 40000-7FFFFH
;
; ----- (optional) -----
;
;  Dallas DS-1216E	(aka 'SmartWatch' or 'No-Slot-Clock') Clock Chip
;			  inserted under Boot ROM
;
;  GIDE - IDE Hard Disk interface
;
; ----- With ETS180IO+ -----
;
;  Exar 88C681 DUART	Two Serial Sync/Async RS-232 Channels (Banked only)
;
;  Epson 62421/72421	Real Time Clock/Calendar Chip, battery backed
;
; ----- With ETS180IO+ or MicroMint SCSI -----
;
;  NCR 5380		SCSI Controller for Hard Drives (Polled IO)
;
;===========================================================================
; Ver     Date        Revision Description
; ---   ---------   ------------------------
; 1.5 -  3 Jun 04 - Added GIDE option, cleaned module for GPL release.	 HFB
; 1.4 - 11 Oct 01 - Raised to current baseline for GPL release.		 HFB
; 1.3 -  5 Aug 95 - Added Xon/Xoff Flow control, Fixed Floppy problems,
;		corrected bug when aborting from banked routines.	 HFB
; 1.2 (misc development, bug fixing - not released)
; 1.1 - 14 Mar 93 - Revised Device Addressing for more than 4 devices,
;		added 88C681 DUART code, minimize on Boot Tracks.	 HFB
; 1.0 - 26 Jan 92 - Updated to baseline for 1.0.			 HFB
; 0.0 - 23 Jun 91 - Initial SB-180 test release.			 HFB
;***************************************************************************

	NAME	BPBIO

FALSE	EQU	0
TRUE	EQU	NOT FALSE
NO	EQU	FALSE
YES	EQU	TRUE
				; << ******  SYSTEM SPECIFIC  ****** >>
				; <<  Insert DEF-xxxx.LIB definition >>
	INCLUDE	DEF-18.LIB	; <<   file for your configuration.  >>

	CSEG
;.....
; Ascii Character Equates

ETX	EQU	03H		; End-of-Text
ACK	EQU	06H		; Acknowledge
BELL	EQU	07H		; Bell Character
CR	EQU	0DH
LF	EQU	0AH
XON	EQU	11H		; X-On  (Control-Q)
XOFF	EQU	13H		; X-Off (Control-S)
ESC	EQU	1BH

; Miscellaneous Equates

WRUAL	EQU	2		; DOS code for unallocated write

LOCKF	EQU	LOW [NOT AUTOSL] ;Lock flag for format default
ALONE	EQU	FALSE		; Boot code equate
	  IF  Z3
	MACLIB	Z3BASE		; Include ENV definitions
	  ENDIF
	PAGE
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;  BIOS Entry Jump Table - This MUST be in Common Memory
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	CSEG

BIOSJT:	JP	CBOOT		; 00 Cold Boot
	JP	WBOOT		; 01 Warm Boot
	JP	CONST		; 02 console input status	* (IOP+12)
	JP	CONIN		; 03 console input		* (IOP+15)
	JP	CONOUT		; 04 console output		* (IOP+18)
	JP	LIST		; 05 list output		* (IOP+21)
	JP	AUXOUT		; 06 aux out (punch)		* (IOP+24)
	JP	AUXIN		; 07 aux in (reader)		* (IOP+27)
	JP	HOME		; 08 seek track 0
	JP	SELDSK		; 09 select logical drive
	JP	SETTRK		; 10 select track
	JP	SETSEC		; 11 select sector
	JP	SETDMA		; 12 set dma address for disk xfer
	JP	READ		; 13 disk read
	JP	WRITE		; 14 disk write
	JP	LISTST		; 15 list output status		* (IOP+30)
	JP	SECTRN		; 16 logical -> physical sector xlate

; --- <<< End of CP/M 2.2 Vectors >>>

	JP	CONOST		; 17 console output status
	JP	AUXIST		; 18 aux input status
	JP	AUXOST		; 19 aux output status
	JP	DEVTBL		; 20 cp/m 3 device table
	JP	DEVINI		; 21 Character Device init (Near CP/M 3)
	JP	DRVTBL		; 22 dph pointer table for a-p
	JP	0		; 23 RESERVED FOR MULTIO
	JP	FLUSH		; 24 flush deblocker
	JP	MOVE		; 25 Perform possible Inter-Bank Move
	  IF  CLOCK
	JP	TIME		; 26 get/set rtc (zsdos params)
	  ELSE
	JP	ISTRUE		; 26 return 0FFH (No Clock) if No code
	  ENDIF		;clock
	JP	SELMEM		; 27 Select Alternate Memory Bank
	JP	SETBNK		; 28 Select DMA Memory bank
	JP	XMOVE		; 29 Set Source/Destination Banks for Move

; --- <<< End of CP/M 3 Vectors >>>

	JP	RETBIO		; 30 Return BIOS Addresses
	JP	DIRDIO		; 31 Direct Disk I/O
	JP	STFARC		; 32 Set Bank for FRJP and FRCALL
	JP	FRJP		; 33 Jump to (HL) in Alternate Bank
	JP	FRCLR		; 34 Clear Stack switcher from Alt Bank Jumps
				;	(used for error exits)
	JP	FRGETB		; 35 Load A,(HL) from Alternate Bank
	JP	FRGETW		; 36 Load DE,(HL) from Alternate Bank
	JP	FRPUTB		; 37 Load (HL),A to Alternate Bank
	JP	FRPUTW		; 38 Load (HL),DE to Alternate Bank
	JP	RETMEM		; 39 Return Current Active Memory Bank

CPR	EQU	BIOSJT-800H-0E00H
DOS	EQU	BIOSJT-0E00H

; End of BIOS Jump Table
	PAGE
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;	Boot / Banked    Routine    Linkage
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	  IF  BANKED
	COMMON	/BANK2/
ROMJT:
	   IF  INROM
	JP	INSYNC
INSYNC:	JP	BOOTER		; Cold start loader
	   ELSE
	JP	0		; Reserved
	JP	0
	   ENDIF		; Inrom
JDIRIO:	JP	DIRIO		; Low Level HDC/FDC Functions
JHDCIO:	JP	DIRIO		; Low Level HDC Functions (combined w/FDCIO)
JBREAD:	JP	BREAD		; BIOS Read
JBWRT:	JP	BWRT		; BIOS Write
JBSTRN:	JP	BSTRN		; BIOS Sectran
	   IF  INROM
	INCLUDE	BOOTROM.Z80	; Boot Routines
	   ENDIF		; Inrom
	  ENDIF			; Banked
	PAGE
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;	  C o n f i g u r a t i o n    A r e a
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
				; << ****** HARDWARE SPECIFIC ****** >>
				; <<  Insert ICFG-xxx to initialize  >>
	INCLUDE	ICFG-18.Z80	; <<    your computer's IO system    >>
	PAGE
				; << ****** Hardware Specific ****** >>
				; << Enter Low level Byte I/O driver >>
	INCLUDE	IIO-18.Z80	; <<  routines in file IIO-xxxx.Z80  >>
	PAGE
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;		Cold   Start   Code 
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	DSEG
				; << ***** Hardware Specific ***** >>
				; << Insert the Cold boot routines >>
	INCLUDE	CBOOT-18.Z80	; <<     in file CBOOT-xx.Z80      >>

; Deblocking Buffer Allocation

	  IF  [BANKED OR INROM]
	COMMON	/B2RAM/
	   IF  INROM
HSTBUF:	DEFS	INITCS		; Use a 1k buffer w/below
	   ELSE
HSTBUF	EQU	CBOOT0		; Use CBOOT0 code for part of buffer w/below
	   ENDIF	;inrom
	  ELSE
	DSEG
HSTBUF	EQU	CBOOT
	  ENDIF		;not banked
	  IF  CDROM
	DEFS	2048-(INITCS)	; Use a 2k buffer for CDROM block size
	  ELSE
	DEFS	1024-(INITCS)	; Use a 1 k buffer
	  ENDIF		;cdrom

HSTSIZ	EQU	$-HSTBUF	; Needed for Hard Drive Direct Access

	  IF  BANKED AND [[INROM] OR [NOT IBMOVS]]
	DSEG
IBMVBF:	DEFS	256		; Inter-bank move buffer
	  ENDIF
	PAGE
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;		Disk   Data   Structures
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; NOTE: The SB-180 does not have the ability to automatically handle "High-
;       Density 5.25" and 3.5" disk drives since the Density-Select line is
;       not implemented, and the Motor control signal is also used to switch
;       the data rate between 250 and 500 kbps.  This results in the drive
;       motors being turned off at the "high-density" data rates.  If these
;       problems are addressed, you may need to increase the MXFALC value to
;       880 to allow enough space for 1.76 MB 3.5" Drives.
;
MXFDIR	EQU	255		; Max number of dir entries-1 for floppy
	  IF  FLOPY8 OR FLOPYH	; Max number of alloc blocks for floppys.
MXFALC	EQU	720		; If 8" drives are to be accomodated, set
	  ELSE			; this for 720 (1.44 MB), otherwise the
MXFALC	EQU	400		; maximum is 400 (800 KB) for 80 track, DS.
	  ENDIF

	CSEG
	  IF  BANKED
	COMMON  /BANK2/
	  ENDIF
	  IF  AUTOSL
DPB:				; Marker for DPB start if Autoselecting
	INCLUDE	DPB.LIB		; Default common autoselecting DD/SD formats
	   IF  FLOPYH
	INCLUDE	DPB-H.LIB	; "High-Density" Autoselecting Disk formats
	   ENDIF		;  (See note above)
	   IF  FLOPY8
	INCLUDE	DPB-8.LIB	; 8" Autoselecting Disk formats
	   ENDIF
	   IF  MORDPB
	INCLUDE	DPB2.LIB	; Additional assignable DPB's if desired
	   ENDIF
	  ELSE		;Not autosl
	CSEG			; Go to Code segment, banked or Not
DPB:				; Alternate DPB marker if Not Autoselecting
	INCLUDE	DPBRAM.LIB	; RAM-based DPB's assigned per physical format
	  ENDIF
NRDPB	EQU	[$-DPB]/DPBSIZ	; Calc number of DPB's

	CSEG			; Hard & Ramdisk DPBs and DPHs go in Code Seg
	  IF  HARDDSK
				; << ****** Hardware Specific ****** >>
				; <<  Insert DPB Info for Hard Disk  >>
	INCLUDE	DPBHD-18.LIB	; <<     Drives as DPBHD-xx.LIB      >>
	  ENDIF
	  IF  RAMDSK
				; << ****** Hardware Specific ****** >>
				; <<  Insert DPB Info for RAM Disk   >>
	INCLUDE	DPBM-18.LIB	; <<     in file DPBM-xxx.LIB        >>
	  ENDIF
	PAGE
	INCLUDE	DPH.LIB		; Disk parameter headers

	  IF  HARDDSK
	INCLUDE	DPHHD.LIB	; Insert DPH Info for Hard Disk Partitions
	  ENDIF

	  IF  RAMDSK
	INCLUDE	DPHM.LIB	; Insert DPH Info for RAM Disk
	  ENDIF
	PAGE
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;     Disk   Driver   Low - Level   Function   Links
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
; Direct  Disk  I / O
;  Call with: Function Number in C, Driver number in B,
;	      Args in A, DE, HL
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	CSEG
DIRDIO:
	  IF  BANKED
	CALL	BIOSTK
	CALL	GOSYSB		; Bank in the system bank
	JP	JDIRIO		; And jump to Banked-BIOS function

	COMMON	/BANK2/
	  ENDIF

DIRIO:	PUSH	HL		; Save user's HL
	PUSH	AF		;   and A reg for range checks
	LD	A,B
	CP	MAXDDA		; Legal Driver #?
	JR	NC,DIRIOX	; ..jump Error Exit if Not
	PUSH	BC
	LD	HL,DDIOTB
	LD	C,B		; Driver number
	LD	B,0
	ADD	HL,BC
	ADD	HL,BC		; Index into table
	ADD	HL,BC
	LD	A,(HL)		; Max call number
	INC	HL
	LD	C,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,C		; Service vector table address in HL
	POP	BC		; Requested call
	DEC	A		; Correct Max Call # for Testing
	JP	M,DIRIOX	; ..jump Error exit if 0 --> FF (No Calls)
	CP	C		; Greater than Maximum Function?
	JR	C,DIRIOX	; ..jump Error exit if so
	PUSH	BC		; else Save BC
	LD	B,0
	ADD	HL,BC
	ADD	HL,BC		; Add twice for Word index
	LD	B,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,B		; Put vector in HL
	POP	BC		; Restore User's BC register
	POP	AF		;  Restore A and Flags
	EX	(SP),HL		;   restore HL, Vector to TOS
	RET			; Jump to Routine

DIRIOX:	POP	AF		; Clear stack
	POP	HL
	OR	0FFH		; Set Error return
	RET			;   and quit

; Direct Disk Access Table Pointer Table

DDIOTB:	DEFB	0
	DEFW	00		; No Driver 0
	DEFB	MAXFFN
	DEFW	FDFUNC		; 1 is Primary Floppy Driver
	  IF  HARDDSK
	DEFB	MAXHFN
	DEFW	HDFUNC		; 2 is Primary Hard Disk Driver
	  ENDIF		;harddsk
	  IF  [RAMDSK AND NOT HARDDSK]
	DEFB	0
	DEFW	00		; (Dummy 2 if not installed)
	  ENDIF		;ramdsk and not harddsk
	  IF  RAMDSK
	DEFB	0
	DEFW	00		; 3 is Primary RAM Disk Driver (No Functions)
	  ENDIF		;ramdsk

MAXDDA	EQU	($-DDIOTB)/3	; Number of entries in pointer table

; Floppy Drive Function Table and Numbers

FDFUNC:	DEFW	STMODE		; 00 set mode
	DEFW	STSIZE		; 01 set drive size
	DEFW	STHDRV		; 02 set head and drive
	DEFW	STSECT		; 03 set sector #, size and eot
	DEFW	SPEC		; 04 specify srt, hlt, hut
	DEFW	RECAL		; 05 home the floppy
	DEFW	SEEK		; 06 seek track
	DEFW	SREAD		; 07 read
	DEFW	SWRITE		; 08 write
	DEFW	READID		; 09 read id
	DEFW	RETDST		; 10 return drive status & result ptr
	DEFW	FMTTRK		; 11 format a track
MAXFFN	EQU	[$-FDFUNC]/2

; Hard Disk Function Table and Numbers

	  IF  HARDDSK
HDFUNC:	DEFW	HDVALS		; 00 Set Data Addr, Return Comnd Blk Size
	DEFW	HDSLCT		; 01 Select a Hard Disk Drive Unit
	DEFW	HD_RW		; 02 Execute Disk Drive Command directly
MAXHFN	EQU	[$-HDFUNC]/2
	  ENDIF		;harddsk
	PAGE
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;	Banked   Memory   Support   Routines
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;  Bank Control Routines.  Used only in Banked Systems
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

	  IF  BANKED		; << ****** HARDWARE SPECIFIC ****** >>
				; <<  Enter the Inter-Bank Movement  >>
	INCLUDE	IBMV-18.Z80	; <<    routines in IBMV-xxx.Z80     >>

	  ELSE			; If Not Banked, Use these hooks

MOVE:	LDIR
	RET

SETBNK:
SELMEM:
RETMEM:
XMOVE:
GOSYSB:
FRCLR:
STFARC:	RET

FRJP:	JP	(HL)

FRGETB:	LD	A,(HL)
	RET

FRGETW:	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	DEC	HL
	RET

FRPUTB:	LD	(HL),A
	RET

FRPUTW:	LD	(HL),E
	INC	HL
	LD	(HL),D
	DEC	HL
	RET

	  ENDIF		;(not) banked
	PAGE
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;	Core   BIOS   Code
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;	Return  BIOS  Addresses
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

	CSEG

RETBIO:	LD	BC,BIOSJT	; Get address of bios base
	LD	DE,CONFIG	; Point to configuration area
	LD	HL,DEVCFG	; Point to Device Table (for Device swap)
	LD	A,VERS		; Return BIOS Version
	RET

;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;	Return  DPH  Table  Address
;::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

DRVTBL:	LD	HL,DPHTBL	; Point to DPH table
	RET

	PAGE
	INCLUDE	BYTEIO.Z80	; Con:, aux:, lst: redirection
	PAGE
	INCLUDE	SELRWD.Z80	; Physical driver link for disks
	PAGE
	INCLUDE	DEBLOCK.Z80	; Hstbuf deblocker
	PAGE
	INCLUDE	SECTRAN.Z80	; Sector translation
	PAGE
	  IF  AUTOSL
	INCLUDE	SELFLP2.Z80	; Floppy disk select
	  ELSE
	INCLUDE	SELFLP1.Z80
	  ENDIF
	PAGE
	INCLUDE	FLOPPY.Z80	; Hardware independent floppy routines
	PAGE
				; << ****** Hardware Specific ****** >>
				; <<  Enter routines for your Floppy >>
	INCLUDE	FDC-18.Z80	; << disk controller in FDC-xxxx.Z80 >>
	PAGE
			 	; << ****** Hardware Specific ****** >>
				; <<  Enter routines for your timer  >>
	INCLUDE	TIM-18.Z80	; <<    and clock in TIM-xxxx.Z80    >>
	  IF  HARDDSK
	PAGE
				; << ****** Hardware Specific ****** >>
				; << Enter driver routines for your  >>
	   IF  IDE		; <<     Hard Drive subsystem	     >>
	INCLUDE	IDE.Z80		; Generic GIDE Module
	   ELSE
	INCLUDE	SCSI-18.Z80	; Basic Polled 5380 driver for SB-180
	   ENDIF
	  ENDIF
	  IF  RAMDSK
	PAGE
				; << ****** Hardware Specific ****** >>
				; <<  Enter driver routines for RAM  >>
	INCLUDE	RAMD-18.Z80	; <<      Disk in RAMD-xxx.Z80       >>
	  ENDIF
	PAGE
				; << ****** Hardware Specific ****** >>
				; <<   Enter Warm Boot routines in   >>
	INCLUDE	WBOOT-18.Z80	; <<          WBOOT-xx.Z80           >>
;.....
; Status bytes of general use placed at end of Data area

	DSEG

FDONE:	DEFS	1		; FDC Flag 0=Ready, 1=Busy, 0FFH=Done
HDONE:	DEFS	1		; HDC Flag 0=Ready, 1=Busy, 0FFH=Done
ERFLAG:	DEFS	1		; Disk Operation Error Code
	DEFS	3		; (reserved)

; Add Character IO buffers here to insure they are at end of DSEG

	  IF  BUFAUX
COM1Q:	DEFS	1		; Char count in Queue
	DEFS	QSIZE		; 1 to 255 characater type-ahead buffer
	  ENDIF

	  IF  BUFCON
COM2Q:	DEFS	1		; Char count in Queue
	DEFS	QSIZE		; 1 to 255 characater type-ahead buffer
	  ENDIF

	  IF  BUFAUX OR BUFCON
	DEFS	12		; Stack for Buffered Character IO routines
INTSP:	DEFS	2		;   Storage for entry Stack Pointer
	  ENDIF

; Flags for Xon/Xoff Flow Control on Serial Ports
	  IF  XONOFF
COM1WT:	DEFS	1		; B7=0 - Ok, B7=1 - Output Wait
COM2WT:	DEFS	1		;   B0=0 - Ok, B0=1 - Input Wait
	  ENDIF

PAOR:	DEFS	1		; Parallel Output Ready Flag

	  IF  [BANKED AND ZSDOS2]
	COMMON	/B2RAM/		; Put this label in Banked Memory
	  ENDIF			;   else in DSEG
BRAME:	DEFS	2		; Use as dynamic sizing label for Hard Drive
				;  ALV buffers, and storage area for sizing.
				; ALV Buffers build up from here in memory.
	CSEG

; Display warning if we are assembling for MOVCPM integration and the
; combined CSEG/Initialized DSEG size exceeds 1 or 2 Boot Records

FINAL	EQU	$-BIOSJT+INITCS		; Final Code/Data Size

PRINTX	MACRO	xx
	.printx	xx
	ENDM

	  IF  MOVCPM AND FINAL > 4480
	.printx
	.printx **** BIOS too big (>4480 bytes) for Boot Tracks! ****
	PRINTX	%FINAL
	.printx
	  ELSE
	   IF  MOVCPM AND FINAL > 4352
	.printx
	.printx ++++ BIOS exceeds 2-sector (4352 byte) Boot Record ++++
	PRINTX	%FINAL
	.printx
	   ENDIF
	  ENDIF

NSECTS	EQU	($+INITCS-BIOSJT)/128+1
	  IF  INROM
	INCLUDE	BOOTRAM.Z80
	  ENDIF

	END
