	TITLE	'ZCPR Version 1.0'
;
;  CP/M Z80 Command Processor Replacement (CPR) Version 1.0
;	CCPZ CREATED AND CUSTOMIZED FOR ARIES-II BY RLC
;	FURTHER MODIFIED BY RGF AS V2.0
;	FURTHER MODIFIED BY RLC AS V2.1
;	FURTHER MODIFIED BY KBP AS V2.2
;	FURTHER MODIFIED BY RLC AS V2.4 (V2.3 skipped)
;	FURTHER MODIFIED BY RLC AS V2.5
;	FURTHER MODIFIED BY RLC AS V2.6
;	FURTHUR MODIFIED BY SBB AS V2.7
;	FURTHER MODIFIED BY RLC AS V2.8
;	FURTHER MODIFIED BY RLC AS V2.9
;	FURTHER MODIFIED BY RLC AS V3.0
;	FURTHER MODIFIED BY RLC AS V3.1
;	FURTHER MODIFIED BY RLC AS V4.0
;	ZCPR VERSION 1.0 CREATED FROM CCPZ VERSION 4.0 BY RLC IN
;		A COORDINATED EFFORT WITH CCP-GROUP
;
;	ZCPR is a group effort by CCP-GROUP, whose active membership involved
; in this project consists of the following:
;		RLC - Richard Conn
;		RGF - Ron Fowler
;		KBP - Keith Peterson
;		FJW - Frank Wancho
;	The following individual also provided a contribution:
;		SBB - Steve Bogolub
;
;
;******** Structure Notes ********
;
;	This CPR is divided into a number of major sections.  The following
; is an outline of these sections and the names of the major routines
; located therein.
;
; Section	Function/Routines
; -------	-----------------
;
;   --		Opening Comments, Equates, and Macro Definitions
;
;    0		JMP Table into CPR
;
;    1		Buffers
;
;    2		CPR Starting Modules
;			CPR1	CPR	RESTRT	RSTCPR	RCPRNL
;			PRNNF
;
;    3		Utilities
;			CRLF	CONOUT	CONIN	LCOUT	LSTOUT
;			READF	READ	BDOSB	PRINTC	PRINT
;			GETDRV	DEFDMA	DMASET	RESET	BDOSJP
;			LOGIN	OPENF	OPEN	GRBDOS	CLOSE
;			SEARF	SEAR1	SEARN	SUBKIL	DELETE
;			RESETUSR GETUSR	SETUSR
;
;     4		CPR Utilities
;			SETUD	SETU0D	UCASE	REDBUF	CNVBUF
;			BREAK	USRNUM	ERROR	SDELM	ADVAN
;			SBLANK	ADDAH	NUMBER	NUMERR	HEXNUM
;			DIRPTR	SLOGIN	DLOGIN	COMLOG	SCANER
;			CMDSER
;
;     5		CPR-Resident Commands and Functions
;     5A		DIR	DIRPR	FILLQ
;     5B		ERA
;     5C		LIST (if enabled)
;     5D		TYPE	PAGER
;     5E		SAVE (if enabled) EXTEST
;     5F		REN
;     5G		USER
;     5H		DFU (if enabled)
;     5I		JUMP (if enabled)
;     5J		GO (if enabled)
;     5K		COM	CALLPROG	ERRLOG	ERRJMP
;     5L		GET (if enabled) MEMLOAD	PRNLE
;
;
        INCLUDE ZINC.INC        ; ZINC configuration

;
;  CUSTOMIZATION EQUATES
;
;  The following equates may be used to customize this CPR for the user's
;    system and integration technique.  The following constants are provided:
;
;    REL - TRUE if integration is to be done via MOVCPM
;        - FALSE if integration is to be done via DDT and SYSGEN
;
;    BASE - Base Address of user's CP/M system (normally 0 for DR version)
;           This equate allows easy modification by non-standard CP/M (eg,H89)
;
;    CPRLOC - Base Page Address of CPR; this value can be obtained by running
;	      the BDOSLOC program on your system, or by setting the
;	      MSIZE and BIOSEX equates to the system memory size in
;	      K-bytes and the "extra" memory required by your BIOS
;	      in K-bytes. BIOSEX is zero if your BIOS is normal size,
;	      and can be negative if your BIOS is in PROM or in
;	      non-contiguous memory.
;
;    RAS - Remote-Access System; setting this equate to TRUE disables
;	   certain CPR commands that are considered harmful in a Remote-
;	   Access environment; use under Remote-Access Systems (RBBS) for
;	   security purposes
;
REL:	EQU	FALSE		;SET TO TRUE FOR MOVCPM INTEGRATION
;
BASE:	EQU	CPMLOC		;BASE OF CP/M SYSTEM (SET FOR STANDARD CP/M)
;
	IF	REL
CPRLOC:	EQU	0		;MOVCPM IMAGE
	ELSE	
;
; If REL is FALSE, the value of CPRLOC may be set in one
; of two ways.  The first way is to set MSIZE and BIOSEX
; as described above using the following three lines:
;
;MSIZE	EQU	56	;SIZE OF MEM IN K-BYTES
;BIOSEX	EQU	0	;EXTRA # K-BYTES IN BIOS
;CPRLOC	EQU	3400H+(MSIZE-20-BIOSEX)*1024	;CPR ORIGIN
;
; The second way is to obtain the origin of your current
; CPR using BDSLOC or its equivalent, then merely set CPRLOC
; to that value as as in the following line:
;
CPRLOC:	EQU	CCPLOC	;WW - CUSTOMIZED FOR ROMWBW
;
; Note that you should only use one method or the other.
; Do NOT define CPRLOC twice!
;
; The following gives the required offset to load the CPR into the
; CP/M SYSGEN Image through DDT (the Roffset command); Note that this
; value conforms with the standard value presented in the CP/M reference
; manuals, but it may not necessarily conform with the location of the
; CPR in YOUR CP/M system; several systems (Morrow Designs, P&T, Heath
; Org-0 to name a few) have the CPR located at a non-standard address in
; the SYSGEN Image
;
;CPRR	EQU	0980H-CPRLOC	;DDT LOAD OFFSET
CPRR:	EQU	1100H-CPRLOC	;DDT LOAD OFFSET FOR MORROW DESIGNS
	ENDIF	
;
RAS:	EQU	FALSE		;SET TO TRUE IF CPR IS FOR A REMOTE-ACCESS SYSTEM
;
; The following is presented as an option, but is not generally user-customiz-
; able.  A basic design choice had to be made in the design of ZCPR concerning
; the execution of SUBMIT files.  The original CCP had a problem in this sense
; in that it ALWAYS looked for the SUBMIT file from drive A: and the SUBMIT
; program itself (SUBMIT.COM) would place the $$$.SUB file on the currently
; logged-in drive, so when the user was logged into B: and he issued a SUBMIT
; command, the $$$.SUB was placed on B: and did not execute because the CCP
; looked for it on A: and never found it.
;	After much debate it was decided to have ZCPR perform the same type of
; function as CCP (look for the $$$.SUB file on A:), but the problem with
; SUBMIT.COM still exists.  Hence, RGF designed SuperSUB and RLC took his
; SuperSUB and designed SUB from it; both programs are set up to allow the
; selection at assembly time of creating the $$$.SUB on the logged-in drive
; or on drive A:.
;	A final definition of the Indirect Command File ($$$.SUB or SUBMIT
; File) is presented as follows:
;		"An Indirect Command File is one which contains
;		 a series of commands exactly as they would be
;		 entered from a CP/M Console.  The SUBMIT Command
;		 (or SUB Command) reads this files and transforms
;		 it for processing by the ZCPR (the $$$.SUB File).
;		 ZCPR will then execute the commands indicated
;		 EXACTLY as if they were typed at the Console."
;	Hence, to permit this to happen, the $$$.SUB file must always
; be present on a specific drive, and A: is the choice for said drive.
; With this facility engaged as such, Indirect Command Files like:
;		DIR
;		A:
;		DIR
; can be executed, even though the currently logged-in drive is changed
; during execution.  If the $$$.SUB file was present on the currently
; logged-in drive, the above series of commands would not work since the
; ZCPR would be looking for $$$.SUB on the logged-in drive, and switching
; logged-in drives without moving the $$$.SUB file as well would cause
; processing to abort.
;
SUBA:	equ	TRUE		; Set to TRUE to have $$$.SUB always on A:
	; Set to FALSE to have $$$.SUB on the logged-in drive
;
;   The following flag enables extended processing for user-program supplied
; command lines.  This is for Command Level 3 of ZCPR.  Under the CCPZ Version
; 4.0 philosophy, three command levels exist:
;	(1) that command issued by the user from his console at the '>' prompt
;	(2) that command issued by a $$$.SUB file at the '$' prompt
;	(3) that command issued by a user program by placing the command into
; CIBUFF and setting the character count in CBUFF
;   Setting CLEVEL3 to TRUE enables extended processing of the third level of
; ZCPR command.  All the user program need do is to store the command line and
; set the character count; ZCPR will initialize the pointers properly, store
; the ending zero properly, and capitalize the command line for processing.
; Once the command line is properly stored, the user executes the command line
; by reentering the ZCPR through CPRLOC [NOTE:  The C register MUST contain
; a valid User/Disk Flag (see location 4) at this time.]
;
CLEVEL3:	equ	TRUE	;ENABLE COMMAND LEVEL 3 PROCESSING
;
;
;*** TERMINAL AND 'TYPE' CUSTOMIZATION EQUATES
;
NLINES:	EQU	24		;NUMBER OF LINES ON CRT SCREEN
WIDE:	EQU	TRUE		;TRUE IF WIDE DIR DISPLAY
FENCE:	EQU	'|'		;SEP CHAR BETWEEN DIR FILES
;
PGDFLT:	EQU	TRUE		;SET TO FALSE TO DISABLE PAGING BY DEFAULT
PGDFLG:	EQU	'P'		;FOR TYPE COMMAND: PAGE OR NOT (DEP ON PGDFLT)
	;  THIS FLAG REVERSES THE DEFAULT EFFECT
;
MAXUSR:	EQU	15		;MAXIMUM USER NUMBER ACCESSABLE
;
SYSFLG:	EQU	'A'		;FOR DIR COMMAND: LIST $SYS AND $DIR
;
SOFLG:	EQU	'S'		;FOR DIR COMMAND: LIST $SYS FILES ONLY
;
SUPRES:	EQU	TRUE		;SUPRESSES USER # REPORT FOR USER 0
;
DEFUSR:	EQU	0		;DEFAULT USER NUMBER FOR COM FILES
;
SPRMPT:	EQU	'$'		;CPR PROMPT INDICATING SUBMIT COMMAND
CPRMPT:	EQU	'>'		;CPR PROMPT INDICATING USER COMMAND
;
NUMBASE:	EQU	'H'	;CHARACTER USED TO SWITCH FROM DEFAULT
	; NUMBER BASE
;
SECTFLG:	EQU	'S'	;OPTION CHAR FOR SAVE COMMAND TO SAVE SECTORS
;
; END OF CUSTOMIZATION SECTION
;
;
WBOOT:	EQU	BASE+0000H	;CP/M WARM BOOT ADDRESS
UDFLAG:	EQU	BASE+0004H	;USER NUM IN HIGH NYBBLE, DISK IN LOW
BDOS:	EQU	BASE+0005H	;BDOS FUNCTION CALL ENTRY PT
TFCB:	EQU	BASE+005CH	;DEFAULT FCB BUFFER
TBUFF:	EQU	BASE+0080H	;DEFAULT DISK I/O BUFFER
TPA:	EQU	BASE+0100H	;BASE OF TPA
;
;**** Section 0 ****
;
;	ORG	CPRLOC
;
;  ENTRY POINTS INTO ZCPR
;    If the ZCPR is entered at location CPRLOC (at the JMP to CPR), then
; the default command in CIBUFF will be processed.  If the ZCPR is entered
; at location CPRLOC+3 (at the JMP to CPR1), then the default command in
; CIBUFF will NOT be processed.
;    NOTE:  Entry into ZCPR in this way is permitted under ZCPR Version 4.0,
; but in order for this to work, CIBUFF and CBUFF MUST be initialized properly
; AND the C register MUST contain a valid User/Disk Flag (see Location 4: the
; most significant nybble contains the User Number and the least significant
; nybble contains the Disk Number).
;    Some user programs (such as SYNONYM3) attempt to use the default
; command facility.  Under the original CPR, it was necessary to initialize
; the pointer after the reserved space for the command buffer to point to
; the first byte of the command buffer.  Under Version 4.x of ZCPR, this is
; no longer the case.  The CIBPTR (Command Input Buffer PoinTeR) is located
; to be compatable with such programs (provided they determine the buffer
; length from the byte at MBUFF [CPRLOC + 6]), but under Version 4.x of ZCPR
; this is no longer necessary.  ZCPR Version 4.x automatically initializes
; this buffer pointer in all cases.
;
ENTRY:	
	JP	CPR		; Process potential default command
	JP	CPR1		; Do NOT process potential default command
;
;**** Section 1 ****
; BUFFERS ET AL
;
; INPUT COMMAND LINE AND DEFAULT COMMAND
;   The command line to be executed is stored here.  This command line
; is generated in one of three ways:
;	(1) by the user entering it through the BDOS READLN function at
; the du> prompt [user input from keyboard]
;	(2) by the SUBMIT File Facility placing it there from a $$$.SUB
; file
;	(3) by an external program or user placing the required command
; into this buffer
;   In all cases, the command line is placed into the buffer starting at
; CIBUFF.  This command line is terminated by the last character (NOT Carriage
; Return), and a character count of all characters in the command line
; up to and including the last character is placed into location CBUFF
; (immediately before the command line at CIBUFF).  The placed command line
; is then parsed, interpreted, and the indicated command is executed.
; If CLEVEL3 is permitted, a terminating zero is placed after the command
; (otherwise the user program has to place this zero) and the CIBPTR is
; properly initialized (otherwise the user program has to init this ptr).
; If the command is placed by a user program, entering at CPRLOC is enough
; to have the command processed.  Again, under CCPZ Version 4.0, it is not
; necessary to store the pointer to CIBUFF in CIBPTR; ZCPR will do this for
; the calling program if CLEVEL3 is made TRUE.
;   WARNING:  The command line must NOT exceed BUFLEN characters in length.
; For user programs which load this command, the value of BUFLEN can be
; obtained by examining the byte at MBUFF (CPRLOC + 6).
;
BUFLEN:	EQU	80		;MAXIMUM BUFFER LENGTH
MBUFF:	
	DEFB	BUFLEN		;MAXIMUM BUFFER LENGTH
CBUFF:	
	DEFB	0		;NUMBER OF VALID CHARS IN COMMAND LINE
CIBUFF:	
	DEFB	'               ';DEFAULT (COLD BOOT) COMMAND
CIBUF:	
	DEFB	0		;COMMAND STRING TERMINATOR
	DEFS	BUFLEN-($-CIBUFF)+1;TOTAL IS 'BUFLEN' BYTES
;
CIBPTR:	
	DEFW	CIBUFF		;POINTER TO COMMAND INPUT BUFFER
CIPTR:	
	DEFW	CIBUF		;CURRENT POINTER
;
	DEFS	26		;STACK AREA
STACK:	EQU	$		;TOP OF STACK
;
; FILE TYPE FOR COMMAND
;
COMMSG:	
	DEFB	'COM'
;
; SUBMIT FILE CONTROL BLOCK
;
SUBFCB:	
	IF	SUBA		;IF $$$.SUB ON A:
	DEFB	1		;DISK NAME SET TO DEFAULT TO DRIVE A:
	ENDIF	
;
	IF	NOT SUBA	;IF $$$.SUB ON CURRENT DRIVE
	DEFB	0		;DISK NAME SET TO DEFAULT TO CURRENT DRIVE
	ENDIF	
;
	DEFB	'$$$'		;FILE NAME
	DEFB	'     '
	DEFB	'SUB'		;FILE TYPE
	DEFB	0		;EXTENT NUMBER
	DEFB	0		;S1
SUBFS2:	
	DEFS	1		;S2
SUBFRC:	
	DEFS	1		;RECORD COUNT
	DEFS	16		;DISK GROUP MAP
SUBFCR:	
	DEFS	1		;CURRENT RECORD NUMBER
;
; COMMAND FILE CONTROL BLOCK
;
FCBDN:	
	DEFS	1		;DISK NAME
FCBFN:	
	DEFS	8		;FILE NAME
FCBFT:	
	DEFS	3		;FILE TYPE
	DEFS	1		;EXTENT NUMBER
	DEFS	2		;S1 AND S2
	DEFS	1		;RECORD COUNT
FCBDM:	
	DEFS	16		;DISK GROUP MAP
FCBCR:	
	DEFS	1		;CURRENT RECORD NUMBER
;
; OTHER BUFFERS
;
PAGCNT:	
	DEFB	NLINES-2	;LINES LEFT ON PAGE
CHRCNT:	
	DEFB	0		;CHAR COUNT FOR TYPE
QMCNT:	
	DEFB	0		;QUESTION MARK COUNT FOR FCB TOKEN SCANNER

	IF	Z_EXTCCP
	; load ccp.prl to TPA and execute
CPR:	JP	TPA
CPR1:	JP	TPA+3
	ELSE
	INCLUDE	"B0:3CCP.Z80"
	ENDIF

ENDFILL	DS	CCPSIZE+ENTRY-ENDFILL
	END
