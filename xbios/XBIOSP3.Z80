;
;    Spectrum +3 XBIOS: Spectrum +3 XBIOS implementation for ZINC
;    Copyright (C) 2018  Yuri Prokushev <yuri.prokushev@gmail.com>
;
;    This program is free software; you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation; either version 2 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with this program; if not, write to the Free Software
;    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
; XBIOS functions called using USERF function of CP/M 3 BIOS. 
; For portability use bellow code:
;
; USERF:	PUSH	HL
;       	PUSH	DE
;       	LD	HL,(1)
;       	LD	DE,57h
;       	ADD	HL,DE
;       	POP	DE
;       	EX	(SP),HL
;       	RET
;
; Typically XBIOS placed in BANK 0 (SYSTEM BANK). This means BIOS must switch to
; BANK 0, call XBIOS and switch bank back.
; Documented functions are 80H-EEH

; In most cases just forwarders to +3DOS functions
;

	CPU	.Z80
        CSEG
	ORG	80H

	JP	DD_INIT			; 0080h
	JP	DD_SETUP		; 0083h
	JP	DD_READ_SECTOR		; 0086h
	JP	DD_WRITE_SECTOR		; 0089h
	JP	DD_CHECK_SECTOR		; 008Ch
	JP	DD_FORMAT		; 008Fh
	JP	DD_LOGIN		; 0092h
	JP	DD_SEL_FORMAT		; 0095h
	JP	DD_DRIVE_STATUS		; 0098h
	JP	DD_READ_ID		; 009Bh
	JP	DD_L_DPB		; 009Eh
	JP	DD_L_XDPB		; 00A1h
	JP	DD_L_ON_MOTOR		; 00A4h
	JP	DD_L_T_OFF_MOTOR	; 00A7h
	JP	DD_L_OFF_MOTOR		; 00AAh
	JP	DD_L_READ		; 00ADh
	JP	DD_L_WRITE		; 00B0h
	JP	DD_L_SEEK		; 00B3h
	JP	CD_SA_INIT		; 00B6h
	JP	CD_SA_BAUD		; 00B9h
	JP	CD_SA_PARAMS		; 00BCh
	JP	TE_ASK			; 00BFh
	JP	TE_RESET		; 00C2h
	JP	TE_STL_ASK		; 00C5h
	JP	TE_STL_ON_OFF		; 00C8h
	JP	TE_SET_INK		; 00CBh
	JP	TE_SET_BORDER		; 00CEh
	JP	TE_SET_SPEED		; 00D1h
	JP	KM_SET_EXPAND		; 00D4h
	JP	KM_SET_KEY		; 00D7h
	JP	KM_KT_GET		; 00DAh
	JP	KM_KT_PUT		; 00DDh
	JP	KM_SET_SPEED		; 00E0h
	JP	CD_VERSION		; 00E3h
	JP	CD_INFO			; 00E6h
	JP	SCR_RUN_ROUTINE		; 00E9h
	JP	FIND_FID		; 00ECh

DD_INIT:
        RET
DD_SETUP:
        RET
DD_READ_SECTOR:
        RET
DD_WRITE_SECTOR:
        RET
DD_CHECK_SECTOR:
        RET
DD_FORMAT:
        RET
DD_LOGIN:
        RET
DD_SEL_FORMAT:
        RET
DD_DRIVE_STATUS:
        RET
DD_READ_ID:
        RET
DD_L_DPB:
        RET
DD_L_XDPB:
        RET
DD_L_ON_MOTOR:
        RET
DD_L_T_OFF_MOTOR:
        RET
DD_L_OFF_MOTOR:
        RET
DD_L_READ:
        RET
DD_L_WRITE:
        RET
DD_L_SEEK:
        RET
CD_SA_INIT:
        RET
CD_SA_BAUD:
        RET
CD_SA_PARAMS:
        RET
TE_ASK:
        RET
TE_RESET:
        RET
TE_STL_ASK:
        RET
TE_STL_ON_OFF:
        RET
TE_SET_INK:
        RET
TE_SET_BORDER:
        RET
TE_SET_SPEED:
        RET
KM_SET_EXPAND:
        RET
KM_SET_KEY:
        RET
KM_KT_GET:
        RET
KM_KT_PUT:
        RET
KM_SET_SPEED:
        RET
CD_VERSION:
        RET
CD_INFO:
        RET
SCR_RUN_ROUTINE:
        RET
FIND_FID:
        RET

; Bellow code is based on ZX Spectrum +3 Manual
; org  7000h

mystak       equ 9FFFh  ;arbitrary value picked to be below BFE0h and above 4000h
staksto      equ 9000h  ;somewhere to put BASIC's stack pointer
bankm        equ 5B5Ch  ;system variable that holds the last value output to 7FFDh
port1        equ 7FFDh  ;address of ROM/RAM switching port in I/O map
catbuff      equ 8000h  ;somewhere for DOS to put its catalog
dos_catalog  equ 011Eh  ;the DOS routine to call

demo:

     di                  ;unwise to switch RAM/ROM without disabling interrupts
     ld   (staksto),sp   ;save BASIC's stack pointer
     ld   bc,port1       ;the horizontal ROM switch/RAM switch I/O address
     ld   a,(bankm)      ;system variable that holds current switch state
     res  4,a            ;move right to left in horizontal ROM switch (3 to 2)
     or   7              ;switch in RAM page 7
     ld   (bankm),a      ;must keep system variable up to date (very important)
     out  (c),a          ;make the switch
     ld   sp,mystak      ;make sure stack is above 4000h and below BFE0h
     ei                  ;interrupts can now be enabled

;
;The above will have switched in the DOS ROM and RAM page 7. The stack has also
;been located in a "safe" position for calling DOS
;
;The following is the code to set up and call DOS CATALOG. This is where your
;own code would be placed.
;

     ld   hl,catbuff     ;somewhere for DOS to put the catalog
     ld   de,catbuff+1   ;
     ld   bc,1024        ;maximum is actually 64x13+13 = 845
     ld   (hl),0
     ldir                ;make sure at least first entry is zeroised
     ld   b,64           ;the number of entries in the buffer
     ld   c,1            ;include system files in the catalog
     ld   de,catbuff     ;the location to be filled with the disk catalog
     ld   hl,stardstar   ;the file name ("*.*")
     call dos_catalog    ;call the DOS entry
     push af             ;save flags and possible error number returned by DOS
     pop  hl
     ld   (dosret),hl    ;put it where it can be seen from BASIC
     ld   c,b            ;move number of files in catalog to low byte of BC
     ld   b,0            ;this will be returned in BASIC by the USR function

;
;If the above worked, then BC holds number of files in catalog, the "catbuff"
;will be filled with the alphanumerically sorted catalog and the carry flag but
;in "dosret" will be set. This will be peeked from BASIC to check if all went
;well.
;
;Having made the call to DOS, it is now necessary to undo the ROM and RAM
;switch and put BASIC's stack back to where it was on entry. The following
;will achieve this.

     di                  ;about to ROM/RAM switch so be careful
     push bc             ;save number of files
     ld   bc,port1       ;I/O address of horizontal ROM/RAM switch
     ld   a,(bankm)      ;get current switch state
     set  4,a            ;move left to right (ROM 2 to ROM 3)
     and  F8h            ;also want RAM page 0
     ld   (bankm),a      ;update the system variable (very important)
     out  (c),a          ;make the switch
     pop  bc             ;get back the saved number of files in catalog
     ld   sp,(staksto)   ;put BASIC's stack back
     ret                 ;return to BASIC, value in BC is returned to USR

stardstar:

     defb "*.*",FFh      ;the file name, must be terminated with FFh

dosret:

     defw 0              ;a variable to be peeked from BASIC to see if it worked
        
        
        
        END